import XLSXPopulate from 'xlsx-populate';
import { CrewMember, CrewInfo } from '../types/CTRTypes';

interface TemplateMapping {
  // Header Information
  crewName: string;      // Cell for crew name
  crewNumber: string;    // Cell for crew number
  fireName: string;      // Cell for fire name
  fireNumber: string;    // Cell for fire number
  date1: string;         // Cell for first date
  date2: string;         // Cell for second date

  // Data Start Position
  nameStartRow: number;  // Starting row for crew member data
  nameCol: string;       // Column for names
  classCol: string;      // Column for classifications
  on1Col: string;        // Column for first day ON times
  off1Col: string;       // Column for first day OFF times
  on2Col: string;        // Column for second day ON times
  off2Col: string;       // Column for second day OFF times

  // Total Hours
  totalHoursRow: number; // Row for total hours
  totalHoursCol: string; // Column for total hours
}

// CTR Template Mapping
const CTR_TEMPLATE_MAPPING: TemplateMapping = {
  // Header Information
  crewName: 'A1',         // Crew Name
  crewNumber: 'F1',       // Crew Number
  fireName: 'C2',         // Fire Name
  fireNumber: 'F2',       // Fire Number
  date1: 'F4',           // First Date
  date2: 'H4',           // Second Date

  // Data Start Position
  nameStartRow: 6,        // Start from row 6
  nameCol: 'B',          // Names in column B (B6-B25)
  classCol: 'D',         // Classifications in column D
  on1Col: 'E',           // First day ON times in column E (E6-E25)
  off1Col: 'F',          // First day OFF times in column F (F6-F25)
  on2Col: 'G',           // Second day ON times in column G
  off2Col: 'H',          // Second day OFF times in column H

  // Total Hours
  totalHoursRow: 30,     // Total hours in row 30
  totalHoursCol: 'C'     // Total hours in column C
};

export async function fillExcelTemplate(
  data: CrewMember[],
  crewInfo: CrewInfo,
  days: string[],
  templateUrl = '/CTR_Template.xlsx',
  mapping: TemplateMapping = CTR_TEMPLATE_MAPPING
): Promise<any> {
  try {
    if (!Array.isArray(data)) {
      throw new Error('Data must be an array');
    }

    const response = await fetch(templateUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch template: ${response.statusText}`);
    }
    const arrayBuffer = await response.arrayBuffer();

    // Load the template using xlsx-populate
    const workbook = await XLSXPopulate.fromDataAsync(new Uint8Array(arrayBuffer));
    const sheet = workbook.sheet(0);

    // Fill in header information
    sheet.cell(mapping.crewName).value(crewInfo.crewName);
    sheet.cell(mapping.crewNumber).value(crewInfo.crewNumber);
    sheet.cell(mapping.fireName).value(crewInfo.fireName);
    sheet.cell(mapping.fireNumber).value(crewInfo.fireNumber);

    // Fill in dates
    days.forEach((date, index) => {
      const cellRef = `${mapping.nameCol}${mapping.date1}`;
      sheet.cell(cellRef).value(date);
    });

    // Fill in crew member data
    data.forEach((member, rowIndex) => {
      const row = mapping.nameStartRow + rowIndex;
      
      // Fill in crew member info
      sheet.cell(`${mapping.nameCol}${row}`).value(member.name);
      sheet.cell(`${mapping.classCol}${row}`).value(member.classification);

      // Fill in hours for each day
      member.days.forEach((day, dayIndex) => {
        const col = dayIndex === 0 ? mapping.on1Col : mapping.on2Col;
        sheet.cell(`${col}${row}`).value(day.on || '');
      });

      // Calculate and fill total hours
      const totalHours = calculateTotalHours(member.days);
      sheet.cell(`${mapping.totalHoursCol}${row}`).value(totalHours);
    });

    // Enable worksheet protection
    sheet.protect({
      selectLockedCells: true,
      selectUnlockedCells: true,
      formatCells: false,
      formatColumns: false,
      formatRows: false,
      insertColumns: false,
      insertRows: false,
      insertHyperlinks: false,
      deleteColumns: false,
      deleteRows: false,
      sort: false,
      autoFilter: false,
      pivotTables: false,
      objects: true,
      scenarios: true
    });
    
    return workbook;
  } catch (error) {
    console.error('Error filling Excel template:', error);
    throw error;
  }
}

function calculateTotalHours(days: { on: string; off: string }[]): number {
  let total = 0;
  for (const day of days) {
    if (!day) continue;
    const on = parseMilitaryTime(day.on);
    const off = parseMilitaryTime(day.off);
    if (on !== null && off !== null && off >= on) {
      total += off - on;
    }
  }
  return Number(total.toFixed(2));
}

function parseMilitaryTime(time: string): number | null {
  if (!/^\d{4}$/.test(time)) return null;
  const h = parseInt(time.slice(0, 2), 10);
  const m = parseInt(time.slice(2, 4), 10);
  if (h > 23 || m > 59) return null;
  return h + m / 60;
} 