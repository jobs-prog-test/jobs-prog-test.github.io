{"version":3,"file":"main-a68441a2.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/data/defaultData.ts","../../src/utils/pdfFieldMapper.ts","../../src/utils/filenameGenerator.ts","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../../src/utils/pdfStorage.ts","../../src/utils/fillCTRPDF.ts","../../src/utils/fillExcelTemplate.ts","../../src/utils/CTRDataService.ts","../../src/components/Notification.tsx","../../src/utils/excelMapping.ts","../../src/utils/timeCalculations.ts","../../src/components/DateCalendar.tsx","../../src/components/EnhancedPDFViewer.tsx","../../src/components/MainTable.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","export const defaultData = [\r\n  {\r\n    name: 'John Smith',\r\n    classification: 'FFT1',\r\n    days: [\r\n      { date: '2024-06-01', on: '0830', off: '1730' },\r\n      { date: '2024-06-02', on: '0830', off: '1730' }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Jane Doe',\r\n    classification: 'FFT2',\r\n    days: [\r\n      { date: '2024-06-01', on: '0830', off: '1730' },\r\n      { date: '2024-06-02', on: '0830', off: '1730' }\r\n    ]\r\n  }\r\n]; ","// Maps table data to PDF field names as extracted from pdf_fields.csv\r\nexport function mapToPDFFields(data: any[], crewInfo?: any, signature?: { name: string; signature: string }) {\r\n  const fields: Record<string, string> = {};\r\n  \r\n  // Crew info fields\r\n  if (crewInfo) {\r\n    fields['1 CREW NAME'] = crewInfo.crewName || '';\r\n    fields['2 CREW NUMER'] = crewInfo.crewNumber || '';\r\n    fields['4FIRE NAME'] = crewInfo.fireName || '';\r\n    fields['5 FIRE NUMBER'] = crewInfo.fireNumber || '';\r\n  }\r\n\r\n  // Populate DATE and DATE_2 fields from the first row's days if available\r\n  if (data[0]?.days[0]) {\r\n    fields['DATE'] = data[0].days[0].date;\r\n  }\r\n  if (data[0]?.days[1]) {\r\n    fields['DATE_2'] = data[0].days[1].date;\r\n  }\r\n\r\n  // Only map rows that have actual data\r\n  data.forEach((row, idx) => {\r\n    // Skip rows that don't have a name or classification\r\n    if (!row?.name && !row?.classification) return;\r\n\r\n    const rowNum = idx + 1;\r\n    \r\n    // Use the exact field names from your CSV\r\n    fields[`NAME OF EMPLOYEERow${rowNum}`] = row.name || '';\r\n    fields[`ClASS IF CATIONRow${rowNum}`] = row.classification || '';\r\n\r\n    // Day 1\r\n    if (row.days?.[0]) {\r\n      fields[`ONRow${rowNum}`] = row.days[0].on || '';\r\n      fields[`OFFRow${rowNum}`] = row.days[0].off || '';\r\n    }\r\n\r\n    // Day 2\r\n    if (row.days?.[1]) {\r\n      fields[`ONRow${rowNum}_2`] = row.days[1].on || '';\r\n      fields[`OFFRow${rowNum}_2`] = row.days[1].off || '';\r\n    }\r\n  });\r\n\r\n  return fields;\r\n} ","// Store function to generate formatted filenames\r\n// Initialize ExportInfo object\r\ninterface ExportInfo {\r\n  date: string;\r\n  crewNumber: string;\r\n  fireName: string;\r\n  fireNumber: string;\r\n  type: 'PDF' | 'Excel' | 'CSV';\r\n}\r\n\r\nexport function generateExportFilename(info: ExportInfo): string {\r\n  const { date, crewNumber, fireName, fireNumber, type } = info;\r\n  \r\n  // Format date to YYYY-MM-DD if it's not already\r\n  const formattedDate = date.includes('-') ? date : new Date(date).toISOString().split('T')[0];\r\n  \r\n  // Clean up the values to be filename-safe\r\n  const safeCrewNumber = crewNumber.replace(/[^a-zA-Z0-9]/g, '');\r\n  const safeFireName = fireName.replace(/[^a-zA-Z0-9]/g, '');\r\n  const safeFireNumber = fireNumber.replace(/[^a-zA-Z0-9]/g, '');\r\n  \r\n  // Generate the filename\r\n  const filename = `${formattedDate} ${safeCrewNumber} ${safeFireName} ${safeFireNumber} ${type} CTR`;\r\n  \r\n  // Add appropriate extension\r\n  switch (type) {\r\n    case 'PDF':\r\n      return `${filename}.pdf`;\r\n    case 'Excel':\r\n      return `${filename}.xlsx`;\r\n    case 'CSV':\r\n      return `${filename}.csv`;\r\n    default:\r\n      return filename;\r\n  }\r\n} ","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { openDB } from 'idb';\r\n\r\nconst DB_NAME = 'ctr-pdf-storage';\r\nconst STORE_NAME = 'pdfs';\r\nconst DB_VERSION = 1;\r\n\r\n// Initialize the database\r\nasync function initDB() {\r\n  console.log('Initializing IndexedDB...');\r\n  return openDB(DB_NAME, DB_VERSION, {\r\n    upgrade(db) {\r\n      console.log('Upgrading database...');\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        console.log('Creating object store...');\r\n        db.createObjectStore(STORE_NAME, { keyPath: 'id' });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\n// Store a PDF in IndexedDB\r\nexport async function storePDF(pdfBlob: Blob, metadata: {\r\n  filename: string;\r\n  date: string;\r\n  crewNumber: string;\r\n  fireName: string;\r\n  fireNumber: string;\r\n}) {\r\n  console.log('Storing PDF in IndexedDB...', metadata);\r\n  const db = await initDB();\r\n  const id = `${metadata.date}_${metadata.crewNumber}_${metadata.fireName}_${metadata.fireNumber}`;\r\n  \r\n  try {\r\n    await db.put(STORE_NAME, {\r\n      id,\r\n      pdf: pdfBlob,\r\n      metadata,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    console.log('PDF stored successfully with ID:', id);\r\n    return id;\r\n  } catch (error) {\r\n    console.error('Error storing PDF:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Retrieve a PDF from IndexedDB\r\nexport async function getPDF(id: string) {\r\n  console.log('Retrieving PDF from IndexedDB:', id);\r\n  const db = await initDB();\r\n  const pdf = await db.get(STORE_NAME, id);\r\n  console.log('Retrieved PDF:', pdf ? 'Found' : 'Not found');\r\n  return pdf;\r\n}\r\n\r\n// List all stored PDFs\r\nexport async function listPDFs() {\r\n  console.log('Listing all PDFs from IndexedDB...');\r\n  try {\r\n    const db = await initDB();\r\n    console.log('Database initialized successfully');\r\n    \r\n    const pdfs = await db.getAll(STORE_NAME);\r\n    console.log('Found PDFs:', pdfs.length);\r\n    console.log('PDFs data:', pdfs);\r\n    \r\n    return pdfs;\r\n  } catch (error) {\r\n    console.error('Error in listPDFs:', error);\r\n    if (error instanceof Error) {\r\n      console.error('Error details:', error.message);\r\n      console.error('Error stack:', error.stack);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a PDF from IndexedDB\r\nexport async function deletePDF(id: string) {\r\n  console.log('Deleting PDF from IndexedDB:', id);\r\n  const db = await initDB();\r\n  await db.delete(STORE_NAME, id);\r\n  console.log('PDF deleted successfully');\r\n} ","// Add type declaration at the top of the file\r\ndeclare global {\r\n  interface ImportMeta {\r\n    env: {\r\n      BASE_URL: string;\r\n      MODE: string;\r\n      DEV: boolean;\r\n      PROD: boolean;\r\n    }\r\n  }\r\n}\r\n\r\nimport { PDFDocument } from 'pdf-lib';\r\nimport { mapToPDFFields } from './pdfFieldMapper';\r\nimport { generateExportFilename } from './filenameGenerator';\r\nimport { storePDF } from './pdfStorage';\r\n\r\ninterface PDFGenerationOptions {\r\n  downloadImmediately?: boolean;\r\n  returnBlob?: boolean;\r\n}\r\n\r\n// Fills the CTR PDF and either triggers a download or returns the PDF data\r\nexport async function fillCTRPDF(\r\n  data: any[], \r\n  crewInfo: any, \r\n  options: PDFGenerationOptions = { downloadImmediately: true },\r\n  pdfUrl = '/CTR_Fillable_Edited.pdf'\r\n) {\r\n  try {\r\n    // Ensure the PDF URL is absolute and includes base path\r\n    const basePath = import.meta.env.BASE_URL || '/';\r\n    const absolutePdfUrl = pdfUrl.startsWith('http') ? pdfUrl : `${basePath}${pdfUrl.startsWith('/') ? pdfUrl.slice(1) : pdfUrl}`;\r\n    \r\n    // Add cache-busting query parameter and force network fetch\r\n    const urlWithCacheBust = `${absolutePdfUrl}?t=${Date.now()}`;\r\n    \r\n    const response = await fetch(urlWithCacheBust, {\r\n      cache: 'no-store', // Force network fetch\r\n      headers: {\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      console.error('PDF fetch failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to fetch PDF: ${response.statusText}`);\r\n    }\r\n\r\n    const pdfBytes = await response.arrayBuffer();\r\n    const pdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n    const form = pdfDoc.getForm();\r\n    const fields = mapToPDFFields(data, crewInfo);\r\n\r\n    // Debug: Log available form fields\r\n    console.log('Available PDF form fields:', form.getFields().map(f => f.getName()));\r\n\r\n    // Fill fields\r\n    Object.entries(fields).forEach(([field, value]) => {\r\n      try {\r\n        console.log(`Attempting to fill field: ${field} with value: ${value}`);\r\n        form.getTextField(field).setText(value);\r\n      } catch (e) {\r\n        // Field might not exist, skip or log\r\n        console.warn(`Field ${field} not found in PDF:`, e);\r\n      }\r\n    });\r\n\r\n    // Save PDF\r\n    const filledPdfBytes = await pdfDoc.save();\r\n    const blob = new Blob([filledPdfBytes], { type: 'application/pdf' });\r\n    \r\n    // Generate filename\r\n    const filename = generateExportFilename({\r\n      date: data[0]?.days[0]?.date || new Date().toISOString().split('T')[0],\r\n      crewNumber: crewInfo.crewNumber || '',\r\n      fireName: crewInfo.fireName || '',\r\n      fireNumber: crewInfo.fireNumber || '',\r\n      type: 'PDF'\r\n    });\r\n\r\n    // Store in IndexedDB\r\n    const pdfId = await storePDF(blob, {\r\n      filename,\r\n      date: data[0]?.days[0]?.date || new Date().toISOString().split('T')[0],\r\n      crewNumber: crewInfo.crewNumber || '',\r\n      fireName: crewInfo.fireName || '',\r\n      fireNumber: crewInfo.fireNumber || ''\r\n    });\r\n\r\n    // Handle different output modes\r\n    if (options.downloadImmediately) {\r\n      // Trigger download\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = filename;\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n    }\r\n\r\n    // Return data based on options\r\n    if (options.returnBlob) {\r\n      return { blob, filename, pdfId };\r\n    }\r\n    \r\n    return { filename, pdfId };\r\n  } catch (error) {\r\n    console.error('Error filling PDF:', error);\r\n    if (error instanceof Error) {\r\n      throw error;\r\n    }\r\n    throw new Error('Failed to generate PDF. Please check your internet connection and try again.');\r\n  }\r\n} ","import * as XLSX from 'xlsx';\r\n\r\ninterface CrewMember {\r\n  remarkNumber?: string;\r\n  name: string;\r\n  classification: string;\r\n  days: {\r\n    date: string;\r\n    on: string;\r\n    off: string;\r\n  }[];\r\n}\r\n\r\ninterface CrewInfo {\r\n  crewName: string;\r\n  crewNumber: string;\r\n  fireName: string;\r\n  fireNumber: string;\r\n}\r\n\r\ninterface TemplateMapping {\r\n  // Header Information\r\n  crewName?: string;      // Cell for crew name\r\n  crewNumber?: string;    // Cell for crew number\r\n  fireName?: string;      // Cell for fire name\r\n  fireNumber?: string;    // Cell for fire number\r\n  date1?: string;         // Cell for first date\r\n  date2?: string;         // Cell for second date\r\n\r\n  // Data Start Position\r\n  nameStartRow?: number;  // Starting row for crew member data\r\n  nameCol?: string;       // Column for names\r\n  classCol?: string;      // Column for classifications\r\n  on1Col?: string;        // Column for first day ON times\r\n  off1Col?: string;       // Column for first day OFF times\r\n  on2Col?: string;        // Column for second day ON times\r\n  off2Col?: string;       // Column for second day OFF times\r\n\r\n  // Total Hours\r\n  totalHoursRow?: number; // Row for total hours\r\n  totalHoursCol?: string; // Column for total hours\r\n}\r\n\r\n// CTR Template Mapping\r\nconst CTR_TEMPLATE_MAPPING: TemplateMapping = {\r\n  // Header Information\r\n  crewName: 'A1',         // Crew Name\r\n  crewNumber: 'F1',       // Crew Number\r\n  fireName: 'C2',         // Fire Name\r\n  fireNumber: 'F2',       // Fire Number\r\n  date1: 'F4',           // First Date\r\n  date2: 'H4',           // Second Date\r\n\r\n  // Data Start Position\r\n  nameStartRow: 6,        // Start from row 6\r\n  nameCol: 'B',          // Names in column B (B6-B25)\r\n  classCol: 'D',         // Classifications in column D\r\n  on1Col: 'E',           // First day ON times in column E (E6-E25)\r\n  off1Col: 'F',          // First day OFF times in column F (F6-F25)\r\n  on2Col: 'G',           // Second day ON times in column G\r\n  off2Col: 'H',          // Second day OFF times in column H\r\n\r\n  // Total Hours\r\n  totalHoursRow: 30,     // Total hours in row 30\r\n  totalHoursCol: 'C'     // Total hours in column C\r\n};\r\n\r\nexport async function fillExcelTemplate(\r\n  data: any[],\r\n  crewInfo: any,\r\n  days: string[],\r\n  templateUrl = '/CTR_Template.xlsx',\r\n  mapping: TemplateMapping = CTR_TEMPLATE_MAPPING\r\n): Promise<XLSX.WorkBook> {\r\n  try {\r\n    // Validate input data\r\n    if (!Array.isArray(data)) {\r\n      throw new Error('Data must be an array');\r\n    }\r\n\r\n    // Fetch the template\r\n    const response = await fetch(templateUrl);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch template: ${response.statusText}`);\r\n    }\r\n    \r\n    const templateData = await response.arrayBuffer();\r\n    const workbook = XLSX.read(templateData, { type: 'array' });\r\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n\r\n    // Fill header info\r\n    if (mapping.crewName) {\r\n      worksheet[mapping.crewName] = { t: 's', v: crewInfo?.crewName || '' };\r\n    }\r\n    if (mapping.crewNumber) {\r\n      worksheet[mapping.crewNumber] = { t: 's', v: crewInfo?.crewNumber || '' };\r\n    }\r\n    if (mapping.fireName) {\r\n      worksheet[mapping.fireName] = { t: 's', v: crewInfo?.fireName || '' };\r\n    }\r\n    if (mapping.fireNumber) {\r\n      worksheet[mapping.fireNumber] = { t: 's', v: crewInfo?.fireNumber || '' };\r\n    }\r\n\r\n    // Fill dates\r\n    if (mapping.date1) {\r\n      worksheet[mapping.date1] = { t: 's', v: days?.[0] || '' };\r\n    }\r\n    if (mapping.date2) {\r\n      worksheet[mapping.date2] = { t: 's', v: days?.[1] || '' };\r\n    }\r\n\r\n    // Fill crew member data\r\n    const startRow = mapping.nameStartRow || 6;\r\n    data.forEach((row, idx) => {\r\n      // Skip if row is undefined or has no data\r\n      if (!row || (!row.name && !row.classification)) return;\r\n      \r\n      const rowNum = startRow + idx;\r\n      if (rowNum > startRow + 19) return; // Don't exceed 20 rows\r\n\r\n      // Fill name and classification\r\n      if (mapping.nameCol) {\r\n        worksheet[`${mapping.nameCol}${rowNum}`] = { t: 's', v: row.name || '' };\r\n      }\r\n      if (mapping.classCol) {\r\n        worksheet[`${mapping.classCol}${rowNum}`] = { t: 's', v: row.classification || '' };\r\n      }\r\n\r\n      // Fill times for day 1\r\n      if (row.days?.[0]) {\r\n        if (mapping.on1Col) {\r\n          worksheet[`${mapping.on1Col}${rowNum}`] = { t: 's', v: row.days[0].on || '' };\r\n        }\r\n        if (mapping.off1Col) {\r\n          worksheet[`${mapping.off1Col}${rowNum}`] = { t: 's', v: row.days[0].off || '' };\r\n        }\r\n      }\r\n\r\n      // Fill times for day 2\r\n      if (row.days?.[1]) {\r\n        if (mapping.on2Col) {\r\n          worksheet[`${mapping.on2Col}${rowNum}`] = { t: 's', v: row.days[1].on || '' };\r\n        }\r\n        if (mapping.off2Col) {\r\n          worksheet[`${mapping.off2Col}${rowNum}`] = { t: 's', v: row.days[1].off || '' };\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate and fill total hours\r\n    const totalHours = calculateTotalHours(data);\r\n    if (mapping.totalHoursRow && mapping.totalHoursCol) {\r\n      worksheet[`${mapping.totalHoursCol}${mapping.totalHoursRow}`] = { t: 'n', v: totalHours };\r\n    }\r\n\r\n    return workbook;\r\n  } catch (error) {\r\n    console.error('Error filling Excel template:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction findHeaderCells(worksheet: XLSX.WorkSheet): TemplateMapping {\r\n  const mapping: TemplateMapping = {};\r\n  const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1');\r\n\r\n  // Search for header patterns\r\n  for (let R = range.s.r; R <= range.e.r; R++) {\r\n    for (let C = range.s.c; C <= range.e.c; C++) {\r\n      const cell = worksheet[XLSX.utils.encode_cell({ r: R, c: C })];\r\n      if (!cell || !cell.v) continue;\r\n\r\n      const value = String(cell.v).toLowerCase();\r\n      const cellRef = XLSX.utils.encode_cell({ r: R, c: C });\r\n\r\n      // Look for header patterns\r\n      if (value.includes('crew') && value.includes('name')) {\r\n        mapping.crewName = cellRef;\r\n      } else if (value.includes('crew') && value.includes('number')) {\r\n        mapping.crewNumber = cellRef;\r\n      } else if (value.includes('fire') && value.includes('name')) {\r\n        mapping.fireName = cellRef;\r\n      } else if (value.includes('fire') && value.includes('number')) {\r\n        mapping.fireNumber = cellRef;\r\n      } else if (value.includes('date') && !mapping.date1) {\r\n        mapping.date1 = cellRef;\r\n      } else if (value.includes('date') && mapping.date1) {\r\n        mapping.date2 = cellRef;\r\n      } else if (value.includes('name') && !mapping.nameCol) {\r\n        mapping.nameCol = XLSX.utils.encode_col(C);\r\n        mapping.nameStartRow = R + 1;\r\n      } else if (value.includes('class') && !mapping.classCol) {\r\n        mapping.classCol = XLSX.utils.encode_col(C);\r\n      } else if (value.includes('on') && !mapping.on1Col) {\r\n        mapping.on1Col = XLSX.utils.encode_col(C);\r\n      } else if (value.includes('off') && !mapping.off1Col) {\r\n        mapping.off1Col = XLSX.utils.encode_col(C);\r\n      } else if (value.includes('total') && value.includes('hours')) {\r\n        mapping.totalHoursRow = R;\r\n        mapping.totalHoursCol = XLSX.utils.encode_col(C + 1); // Assuming total is in next column\r\n      }\r\n    }\r\n  }\r\n\r\n  return mapping;\r\n}\r\n\r\nfunction calculateTotalHours(data: CrewMember[]): number {\r\n  if (!Array.isArray(data)) return 0;\r\n  \r\n  let total = 0;\r\n  for (const row of data) {\r\n    if (!row || !row.days || !Array.isArray(row.days)) continue;\r\n    \r\n    for (const day of row.days) {\r\n      if (!day) continue;\r\n      const on = parseMilitaryTime(day.on);\r\n      const off = parseMilitaryTime(day.off);\r\n      if (on !== null && off !== null && off >= on) {\r\n        total += off - on;\r\n      }\r\n    }\r\n  }\r\n  return Number(total.toFixed(2));\r\n}\r\n\r\nfunction parseMilitaryTime(time: string): number | null {\r\n  if (!/^\\d{4}$/.test(time)) return null;\r\n  const h = parseInt(time.slice(0, 2), 10);\r\n  const m = parseInt(time.slice(2, 4), 10);\r\n  if (h > 23 || m > 59) return null;\r\n  return h + m / 60;\r\n} ","import { openDB, DBSchema, IDBPDatabase } from 'idb';\r\n\r\ninterface CTRData extends DBSchema {\r\n  ctr_records: {\r\n    key: string; // date range as key (YYYY-MM-DD to YYYY-MM-DD)\r\n    value: {\r\n      dateRange: string;\r\n      data: any[];\r\n      crewInfo: {\r\n        crewName: string;\r\n        crewNumber: string;\r\n        fireName: string;\r\n        fireNumber: string;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nclass CTRDataService {\r\n  private db: IDBPDatabase<CTRData> | null = null;\r\n  private readonly DB_NAME = 'ctr-database';\r\n  private readonly STORE_NAME = 'ctr_records';\r\n\r\n  async initDB() {\r\n    if (!this.db) {\r\n      this.db = await openDB<CTRData>(this.DB_NAME, 1, {\r\n        upgrade(db) {\r\n          if (!db.objectStoreNames.contains('ctr_records')) {\r\n            db.createObjectStore('ctr_records');\r\n          }\r\n        },\r\n      });\r\n    }\r\n    return this.db;\r\n  }\r\n\r\n  private formatDateRange(date1: string, date2: string): string {\r\n    return `${date1} to ${date2}`;\r\n  }\r\n\r\n  async saveRecord(date1: string, date2: string, data: any[], crewInfo: any) {\r\n    const db = await this.initDB();\r\n    const dateRange = this.formatDateRange(date1, date2);\r\n    console.log('Saving date range:', dateRange);\r\n    await db.put(this.STORE_NAME, {\r\n      dateRange,\r\n      data,\r\n      crewInfo\r\n    }, dateRange);\r\n  }\r\n\r\n  async getRecord(dateRange: string) {\r\n    const db = await this.initDB();\r\n    console.log('Getting record for date range:', dateRange);\r\n    return db.get(this.STORE_NAME, dateRange);\r\n  }\r\n\r\n  async getAllDateRanges(): Promise<string[]> {\r\n    const db = await this.initDB();\r\n    const ranges = await db.getAllKeys(this.STORE_NAME);\r\n    console.log('All date ranges:', ranges);\r\n    return ranges;\r\n  }\r\n\r\n  async deleteRecord(dateRange: string) {\r\n    const db = await this.initDB();\r\n    await db.delete(this.STORE_NAME, dateRange);\r\n  }\r\n}\r\n\r\nexport const ctrDataService = new CTRDataService(); ","import React from 'react';\r\nimport '../styles/Notification.css';\r\n\r\ninterface NotificationProps {\r\n  message: string;\r\n  type: 'success' | 'info' | 'warning' | 'error';\r\n  onClose: () => void;\r\n  duration?: number;\r\n}\r\n\r\nexport function Notification(props: NotificationProps) {\r\n  const { message, type, onClose, duration = 3000 } = props;\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onClose();\r\n    }, duration);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [duration, onClose]);\r\n\r\n  return (\r\n    <div className={`notification notification-${type}`}>\r\n      <div className=\"notification-content\">\r\n        {message}\r\n      </div>\r\n      <button className=\"notification-close\" onClick={onClose}>×</button>\r\n    </div>\r\n  );\r\n} ","import { CrewMember, CrewInfo } from '../types/CTRTypes';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Define the expected cell locations in the Excel template\r\nexport const EXCEL_CELL_MAPPING = {\r\n  crewInfo: {\r\n    crewName: 'B1',\r\n    crewNumber: 'H1',\r\n    fireName: 'C2',\r\n    fireNumber: 'H2'\r\n  },\r\n  dates: {\r\n    date1: 'F4',\r\n    date2: 'H4'\r\n  },\r\n  crewMembers: {\r\n    startRow: 6, // Excel row 6 is where crew member data starts\r\n    columns: {\r\n      name: 'B',\r\n      classification: 'D',\r\n      on1: 'E',\r\n      off1: 'F',\r\n      on2: 'G',\r\n      off2: 'H'\r\n    }\r\n  }\r\n};\r\n\r\nfunction getMergedCellValue(worksheet: XLSX.WorkSheet, cellAddress: string): any {\r\n  // Check if the cell has a value\r\n  if (worksheet[cellAddress] && worksheet[cellAddress].v !== undefined) {\r\n    return worksheet[cellAddress].v;\r\n  }\r\n  // Check for merges\r\n  const merges = worksheet['!merges'] || [];\r\n  const XLSXUtils = XLSX.utils.decode_cell;\r\n  const target = XLSXUtils(cellAddress);\r\n\r\n  for (const merge of merges) {\r\n    // Check if the cell is within this merge range\r\n    if (\r\n      target.r >= merge.s.r && target.r <= merge.e.r &&\r\n      target.c >= merge.s.c && target.c <= merge.e.c\r\n    ) {\r\n      // Get the top-left cell of the merge\r\n      const topLeft = XLSX.utils.encode_cell({ r: merge.s.r, c: merge.s.c });\r\n      return worksheet[topLeft]?.v ?? '';\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nexport function mapExcelToData(worksheet: XLSX.WorkSheet): { crewInfo: CrewInfo; crewMembers: CrewMember[] } {\r\n  // Extract crew info from specific cells\r\n  const crewInfo: CrewInfo = {\r\n    crewName: getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.crewInfo.crewName) || '',\r\n    crewNumber: getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.crewInfo.crewNumber) || '',\r\n    fireName: getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.crewInfo.fireName) || '',\r\n    fireNumber: getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.crewInfo.fireNumber) || ''\r\n  };\r\n\r\n  // Extract dates from specific cells\r\n  const date1 = getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.dates.date1) || '';\r\n  const date2 = getMergedCellValue(worksheet, EXCEL_CELL_MAPPING.dates.date2) || '';\r\n\r\n  const crewMembers: CrewMember[] = [];\r\n  let row = EXCEL_CELL_MAPPING.crewMembers.startRow;\r\n  \r\n  // Read up to 20 crew members (rows 6-25)\r\n  while (row <= 25) {\r\n    // Get the name cell for this row\r\n    const nameCell = worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.name}${row}`];\r\n    \r\n    // If no name is found in the expected cell, stop reading\r\n    if (!nameCell?.v) break;\r\n\r\n    // Create crew member object with data from specific cells\r\n    const crewMember: CrewMember = {\r\n      name: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.name}${row}`),\r\n      classification: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.classification}${row}`),\r\n      days: [\r\n        {\r\n          date: date1,\r\n          on: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.on1}${row}`),\r\n          off: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.off1}${row}`)\r\n        },\r\n        {\r\n          date: date2,\r\n          on: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.on2}${row}`),\r\n          off: getMergedCellValue(worksheet, `${EXCEL_CELL_MAPPING.crewMembers.columns.off2}${row}`)\r\n        }\r\n      ]\r\n    };\r\n\r\n    crewMembers.push(crewMember);\r\n    row++;\r\n  }\r\n\r\n  return { crewInfo, crewMembers };\r\n}\r\n\r\nexport function mapDataToExcel(data: { crewInfo: CrewInfo; crewMembers: CrewMember[] }): XLSX.WorkSheet {\r\n  const worksheet: XLSX.WorkSheet = {};\r\n\r\n  // Set crew info in specific cells\r\n  worksheet[EXCEL_CELL_MAPPING.crewInfo.crewName] = { t: 's', v: data.crewInfo.crewName };\r\n  worksheet[EXCEL_CELL_MAPPING.crewInfo.crewNumber] = { t: 's', v: data.crewInfo.crewNumber };\r\n  worksheet[EXCEL_CELL_MAPPING.crewInfo.fireName] = { t: 's', v: data.crewInfo.fireName };\r\n  worksheet[EXCEL_CELL_MAPPING.crewInfo.fireNumber] = { t: 's', v: data.crewInfo.fireNumber };\r\n\r\n  // Set dates in specific cells\r\n  if (data.crewMembers[0]?.days[0]) {\r\n    worksheet[EXCEL_CELL_MAPPING.dates.date1] = { t: 's', v: data.crewMembers[0].days[0].date };\r\n  }\r\n  if (data.crewMembers[0]?.days[1]) {\r\n    worksheet[EXCEL_CELL_MAPPING.dates.date2] = { t: 's', v: data.crewMembers[0].days[1].date };\r\n  }\r\n\r\n  // Set crew member data in specific cells\r\n  data.crewMembers.forEach((member, index) => {\r\n    const row = EXCEL_CELL_MAPPING.crewMembers.startRow + index;\r\n    \r\n    // Set name and classification\r\n    worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.name}${row}`] = { t: 's', v: member.name };\r\n    worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.classification}${row}`] = { t: 's', v: member.classification };\r\n    \r\n    // Set first day's times\r\n    if (member.days[0]) {\r\n      worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.on1}${row}`] = { t: 's', v: member.days[0].on };\r\n      worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.off1}${row}`] = { t: 's', v: member.days[0].off };\r\n    }\r\n    \r\n    // Set second day's times\r\n    if (member.days[1]) {\r\n      worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.on2}${row}`] = { t: 's', v: member.days[1].on };\r\n      worksheet[`${EXCEL_CELL_MAPPING.crewMembers.columns.off2}${row}`] = { t: 's', v: member.days[1].off };\r\n    }\r\n  });\r\n\r\n  return worksheet;\r\n} ","// File containing functions for calculate hours\r\n\r\n// CrewMember object with times\r\ninterface CrewMember {\r\n  name: string;\r\n  classification: string;\r\n  days: Array<{\r\n    on: string;\r\n    off: string;\r\n  }>;\r\n}\r\n\r\n// Declare function and export\r\nexport function calculateTotalHours(data: CrewMember[]): number {\r\n  // initialize to totalHours to zero\r\n  let totalHours = 0;\r\n\r\n  // iterate over each CrewMember in data array\r\n  data.forEach(member => {\r\n    // if days empty for member - skip\r\n    if (!member.days) return;\r\n    \r\n    // iterates over each day for crew member\r\n    member.days.forEach(day => {\r\n      // skip if on or off time is missing\r\n      if (!day.on || !day.off) return;\r\n      \r\n      // converts on and off time to minutes\r\n      const onTime = convertToMinutes(day.on);\r\n      const offTime = convertToMinutes(day.off);\r\n\r\n      // skips if conversion fails\r\n      if (onTime === null || offTime === null) return;\r\n\r\n      // convert total minutes to total hours\r\n      let hours = (offTime - onTime) / 60;\r\n      \r\n      // Handle overnight shifts\r\n      if (hours < 0) {\r\n        hours += 24;\r\n      }\r\n\r\n      // calculate running total\r\n      totalHours += hours;\r\n    });\r\n  });\r\n  // round total hours to two decimals\r\n  return Number(totalHours.toFixed(2));\r\n}\r\n\r\n// Function to convert to minutes\r\nfunction convertToMinutes(time: string): number | null {\r\n  // Handle military time format (HHMM) by checking for exactly 4 digits in string\r\n  if (/^\\d{4}$/.test(time)) {\r\n    // establishes hours from first 2 digist, minutes from last 2\r\n    const hours = parseInt(time.substring(0, 2));\r\n    const minutes = parseInt(time.substring(2, 4));\r\n    \r\n    // convert to minutes function\r\n    if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {\r\n      return hours * 60 + minutes;\r\n    }\r\n  }\r\n  \r\n  // Handle HH:MM format\r\n  const match = time.match(/^(\\d{1,2}):(\\d{2})$/);\r\n  if (match) {\r\n    const hours = parseInt(match[1]);\r\n    const minutes = parseInt(match[2]);\r\n    \r\n    //valudate and return total minutes\r\n    if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {\r\n      return hours * 60 + minutes;\r\n    }\r\n  }\r\n\r\n  return null;\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport '../styles/DateCalendar.css';\r\n\r\n// DateCalendar object properties\r\ninterface DateCalendarProps {\r\n  savedDates: string[];\r\n  onDateSelect: (dateRange: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\n// Export function DateCalendar and properties\r\nexport const DateCalendar: React.FC<DateCalendarProps> = ({ savedDates, onDateSelect, onClose }) => {\r\n  // Current date state\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  // Selected date state\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  // Calendar days state\r\n  const [calendarDays, setCalendarDays] = useState<Date[]>([]);\r\n\r\n  // Generate calendar days for the current month\r\n  useEffect(() => {\r\n    // Get the year, month, and first day of the current month\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    \r\n    // Get the day of the week for the first day (0 = Sunday, 6 = Saturday)\r\n    const firstDayOfWeek = firstDay.getDay();\r\n    \r\n    // Calculate the number of days to show from the previous month\r\n    const daysFromPrevMonth = firstDayOfWeek;\r\n    \r\n    // Calculate the number of days to show from the next month\r\n    const totalDays = 35; // 5 rows * 7 days\r\n    const daysFromNextMonth = totalDays - (lastDay.getDate() + daysFromPrevMonth);\r\n    \r\n    const days: Date[] = [];\r\n    \r\n    // Add days from previous month\r\n    for (let i = daysFromPrevMonth - 1; i >= 0; i--) {\r\n      days.push(new Date(year, month, -i));\r\n    }\r\n    \r\n    // Add days from current month\r\n    for (let i = 1; i <= lastDay.getDate(); i++) {\r\n      days.push(new Date(year, month, i));\r\n    }\r\n    \r\n    // Add days from next month\r\n    for (let i = 1; i <= daysFromNextMonth; i++) {\r\n      days.push(new Date(year, month + 1, i));\r\n    }\r\n    \r\n    setCalendarDays(days);\r\n  }, [currentDate]);\r\n\r\n  const handlePrevMonth = () => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));\r\n  };\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    setSelectedDate(date);\r\n    // Find if there's a saved date range that includes this date\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    const matchingDateRange = savedDates.find(range => {\r\n      const [start, end] = range.split(' to ');\r\n      return dateStr >= start && dateStr <= end;\r\n    });\r\n    \r\n    if (matchingDateRange) {\r\n      onDateSelect(matchingDateRange);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const isDateSaved = (date: Date) => {\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    return savedDates.some(range => {\r\n      const [start, end] = range.split(' to ');\r\n      return dateStr >= start && dateStr <= end;\r\n    });\r\n  };\r\n\r\n  const isCurrentMonth = (date: Date) => {\r\n    return date.getMonth() === currentDate.getMonth();\r\n  };\r\n\r\n  return (\r\n    <div className=\"date-calendar-modal\">\r\n      <div className=\"date-calendar-content\">\r\n        <div className=\"date-calendar-header\">\r\n          <button onClick={handlePrevMonth}>&lt;</button>\r\n          <h3>{currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}</h3>\r\n          <button onClick={handleNextMonth}>&gt;</button>\r\n        </div>\r\n        <div className=\"date-calendar-grid\">\r\n          <div className=\"date-calendar-weekdays\">\r\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n              <div key={day} className=\"date-calendar-weekday\">{day}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"date-calendar-days\">\r\n            {calendarDays.map((date, index) => (\r\n              <div\r\n                key={index}\r\n                className={`date-calendar-day ${\r\n                  !isCurrentMonth(date) ? 'other-month' : ''\r\n                } ${isDateSaved(date) ? 'has-entry' : ''} ${\r\n                  selectedDate?.toDateString() === date.toDateString() ? 'selected' : ''\r\n                }`}\r\n                onClick={() => handleDateClick(date)}\r\n              >\r\n                {date.getDate()}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"date-calendar-close\" onClick={onClose}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}; ","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { getPDF } from '../utils/pdfStorage';\nimport '../styles/EnhancedPDFViewer.css';\nimport { PDFDocument } from 'pdf-lib';\n\n// Configure PDF.js worker\nif (typeof window !== 'undefined' && !pdfjsLib.GlobalWorkerOptions.workerSrc) {\n  // Use the worker that's bundled with pdfjs-dist\n  pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsLib.GlobalWorkerOptions.workerSrc || new URL('pdfjs-dist/build/pdf.worker.min.js', import.meta.url).href;\n}\n\n// Configure PDF.js options for offline use\nconst pdfOptions = {\n  disableAutoFetch: true,  // Disable fetching external resources\n  disableStream: true,     // Disable streaming for offline use\n  disableFontFace: false,  // Allow using system fonts\n  useSystemFonts: true,    // Prefer system fonts when available\n  standardFontDataUrl: undefined,  // Don't try to load external fonts\n  cMapUrl: undefined,      // Don't try to load external character maps\n  isEvalSupported: false   // Disable eval for security\n};\n\ninterface EnhancedPDFViewerProps {\n  pdfId?: string;\n  onSave?: (pdfData: Blob) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  readOnly?: boolean;\n}\n\nconst EnhancedPDFViewer: React.FC<EnhancedPDFViewerProps> = ({\n  pdfId,\n  onSave,\n  className,\n  style,\n  readOnly = false\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const drawCanvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const pdfDocRef = useRef<pdfjsLib.PDFDocumentProxy | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawColor, setDrawColor] = useState('#000000');\n  const [drawWidth, setDrawWidth] = useState(2);\n  const lastPosRef = useRef<{ x: number; y: number } | null>(null);\n  const renderTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const renderPDF = useCallback(async (pdfDoc: pdfjsLib.PDFDocumentProxy) => {\n    if (!canvasRef.current || !drawCanvasRef.current) return;\n\n    try {\n      setIsLoading(true);\n      const page = await pdfDoc.getPage(1); // Always render first page\n      \n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d', {\n        alpha: false,  // Optimize for non-transparent content\n        willReadFrequently: false  // Optimize for write-only operations\n      });\n      \n      const drawCanvas = drawCanvasRef.current;\n      const drawContext = drawCanvas.getContext('2d', {\n        alpha: true,\n        willReadFrequently: true  // Drawing needs read operations\n      });\n\n      if (!context || !drawContext) return;\n\n      // Get the PDF's original dimensions\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // Calculate optimal scale based on container size\n      const container = containerRef.current;\n      if (container) {\n        const containerWidth = container.clientWidth;\n        const containerHeight = container.clientHeight;\n        const scale = Math.min(\n          containerWidth / viewport.width,\n          containerHeight / viewport.height\n        );\n        viewport.scale = scale;\n      }\n      \n      // Set canvas sizes to match viewport\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      drawCanvas.height = viewport.height;\n      drawCanvas.width = viewport.width;\n\n      // Clear both canvases\n      context.fillStyle = 'white';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      drawContext.clearRect(0, 0, drawCanvas.width, drawCanvas.height);\n\n      // Render PDF page with optimized settings\n      await page.render({\n        canvasContext: context,\n        viewport: viewport\n      }).promise;\n\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error rendering page:', err);\n      setError('Failed to render page. Please try again.');\n      setIsLoading(false);\n    }\n  }, []);\n\n  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!drawCanvasRef.current) return;\n    const rect = drawCanvasRef.current.getBoundingClientRect();\n    const scaleX = drawCanvasRef.current.width / rect.width;\n    const scaleY = drawCanvasRef.current.height / rect.height;\n    lastPosRef.current = {\n      x: (e.clientX - rect.left) * scaleX,\n      y: (e.clientY - rect.top) * scaleY\n    };\n    setIsDrawing(true);\n  };\n\n  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !drawCanvasRef.current || !lastPosRef.current) return;\n\n    const canvas = drawCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const currentPos = {\n      x: (e.clientX - rect.left) * scaleX,\n      y: (e.clientY - rect.top) * scaleY\n    };\n\n    ctx.beginPath();\n    ctx.strokeStyle = drawColor;\n    ctx.lineWidth = drawWidth;\n    ctx.lineCap = 'round';\n    ctx.moveTo(lastPosRef.current.x, lastPosRef.current.y);\n    ctx.lineTo(currentPos.x, currentPos.y);\n    ctx.stroke();\n\n    lastPosRef.current = currentPos;\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n    lastPosRef.current = null;\n  };\n\n  const clearDrawing = () => {\n    const canvas = drawCanvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const handleSave = async () => {\n    if (!canvasRef.current || !drawCanvasRef.current || !onSave || !pdfDocRef.current) return;\n\n    try {\n      // Get the drawing canvas content as a PNG\n      const drawCanvas = drawCanvasRef.current;\n      const annotationImage = await new Promise<Blob>((resolve) => {\n        drawCanvas.toBlob((blob) => {\n          resolve(blob!);\n        }, 'image/png');\n      });\n\n      // Convert the original PDF to Uint8Array\n      const pdfBytes = await pdfDocRef.current.getData();\n      \n      // Load the PDF with pdf-lib\n      const pdfDoc = await PDFDocument.load(pdfBytes);\n      const pages = pdfDoc.getPages();\n      const firstPage = pages[0];\n\n      // Convert PNG blob to Uint8Array\n      const annotationBytes = new Uint8Array(await annotationImage.arrayBuffer());\n      \n      // Embed the PNG image\n      const annotationPngImage = await pdfDoc.embedPng(annotationBytes);\n      \n      // Get page dimensions\n      const { width, height } = firstPage.getSize();\n      \n      // Draw the annotation image on top of the PDF\n      firstPage.drawImage(annotationPngImage, {\n        x: 0,\n        y: 0,\n        width,\n        height,\n        opacity: 1,\n      });\n\n      // Save the PDF\n      const modifiedPdfBytes = await pdfDoc.save();\n      const modifiedPdfBlob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });\n      \n      onSave(modifiedPdfBlob);\n    } catch (err) {\n      console.error('Error saving PDF:', err);\n      setError('Failed to save PDF with annotations.');\n    }\n  };\n\n  useEffect(() => {\n    let mounted = true;\n    let currentPdf: pdfjsLib.PDFDocumentProxy | null = null;\n\n    const loadPDF = async () => {\n      if (!pdfId) return;\n\n      try {\n        setIsLoading(true);\n        setError(null);\n        \n        const storedPDF = await getPDF(pdfId);\n        if (!storedPDF || !mounted) return;\n\n        const arrayBuffer = await storedPDF.pdf.arrayBuffer();\n        if (!mounted) return;\n\n        const loadingTask = pdfjsLib.getDocument({ \n          data: arrayBuffer,\n          ...pdfOptions\n        });\n        \n        const pdf = await loadingTask.promise;\n        \n        if (!mounted) {\n          pdf.destroy();\n          return;\n        }\n\n        // Clean up previous PDF document\n        if (pdfDocRef.current) {\n          pdfDocRef.current.destroy();\n        }\n\n        currentPdf = pdf;\n        pdfDocRef.current = pdf;\n        await renderPDF(pdf);\n      } catch (err) {\n        console.error('Error loading PDF:', err);\n        if (mounted) {\n          setError('Failed to load PDF. Please try again.');\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadPDF();\n\n    return () => {\n      mounted = false;\n      if (currentPdf) {\n        currentPdf.destroy();\n      }\n      if (pdfDocRef.current) {\n        pdfDocRef.current.destroy();\n        pdfDocRef.current = null;\n      }\n    };\n  }, [pdfId, renderPDF]);\n\n  return (\n    <div className={`enhanced-pdf-viewer ${className || ''}`} style={style}>\n      {!readOnly && (\n        <div className=\"toolbar\">\n          <input\n            type=\"color\"\n            value={drawColor}\n            onChange={(e) => setDrawColor(e.target.value)}\n            title=\"Drawing Color\"\n          />\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={drawWidth}\n            onChange={(e) => setDrawWidth(Number(e.target.value))}\n            title=\"Drawing Width\"\n          />\n          <button onClick={clearDrawing} className=\"clear-btn\">Clear Drawing</button>\n          <button onClick={handleSave} className=\"save-btn\">Save with Signature</button>\n        </div>\n      )}\n\n      <div className=\"canvas-container\" ref={containerRef}>\n        {error && <div className=\"error-message\">{error}</div>}\n        {isLoading && <div className=\"loading\">Loading PDF...</div>}\n        <canvas ref={canvasRef} className=\"pdf-canvas\" />\n        {!readOnly && (\n          <canvas\n            ref={drawCanvasRef}\n            className=\"draw-canvas\"\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={stopDrawing}\n            onMouseLeave={stopDrawing}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedPDFViewer; ","import React, { useEffect, useState } from 'react';\r\nimport { defaultData } from '../data/defaultData';\r\nimport '../styles/MainTable.css';\r\nimport { fillCTRPDF } from '../utils/fillCTRPDF';\r\nimport * as XLSX from 'xlsx';\r\nimport { fillExcelTemplate } from '../utils/fillExcelTemplate';\r\nimport { generateExportFilename } from '../utils/filenameGenerator';\r\nimport { ctrDataService } from '../utils/CTRDataService';\r\nimport { Notification } from './Notification';\r\nimport { mapExcelToData } from '../utils/excelMapping';\r\nimport { CrewMember, CrewInfo, Day } from '../types/CTRTypes';\r\nimport { calculateTotalHours } from '../utils/timeCalculations';\r\nimport { DateCalendar } from './DateCalendar';\r\nimport PDFGenerationViewer from './PDFGenerationViewer';\r\nimport EnhancedPDFViewer from './EnhancedPDFViewer';\r\nimport { storePDF } from '../utils/pdfStorage';\r\n\r\n// TypeScript interfaces\r\ninterface EditingCell {\r\n  row: number;\r\n  field: string;\r\n  dayIdx?: number;\r\n}\r\n\r\ninterface NotificationState {\r\n  message: string;\r\n  type: 'success' | 'info' | 'warning' | 'error';\r\n  show: boolean;\r\n}\r\n\r\nconst STORAGE_KEY = 'ctr-table-data';\r\n\r\nfunction saveData(data: CrewMember[]) {\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n}\r\n\r\nfunction loadData(): CrewMember[] {\r\n  const raw = localStorage.getItem(STORAGE_KEY);\r\n  if (raw) {\r\n    try {\r\n      return JSON.parse(raw);\r\n    } catch {\r\n      return defaultData;\r\n    }\r\n  }\r\n  return defaultData;\r\n}\r\n\r\nfunction toExcelTemplate(data: CrewMember[], crewInfo: CrewInfo, days: string[]): XLSX.WorkBook {\r\n  // Create a blank worksheet with enough rows/cols\r\n  const ws: XLSX.WorkSheet = {};\r\n  // Set up the data array for AoA\r\n  const aoa: any[][] = Array.from({ length: 30 }, () => Array(9).fill(\"\"));\r\n\r\n  // Header info\r\n  aoa[0][1] = crewInfo.crewName || \"\"; // B1\r\n  aoa[0][7] = crewInfo.crewNumber || \"\"; // H1\r\n  aoa[1][1] = crewInfo.fireName || \"\"; // B2\r\n  aoa[1][7] = crewInfo.fireNumber || \"\"; // H2\r\n\r\n  // Date headers\r\n  aoa[3][5] = days[0] || \"\"; // F4\r\n  aoa[3][7] = days[1] || \"\"; // H4\r\n\r\n  // Yellow highlight row (row 6, E-H)\r\n  for (let col = 4; col <= 7; col++) aoa[5][col] = \"\";\r\n\r\n  // Table rows (6-25)\r\n  for (let i = 0; i < 20; i++) {\r\n    const row = data[i] || { name: \"\", classification: \"\", days: [{ on: \"\", off: \"\" }, { on: \"\", off: \"\" }] };\r\n    const r = 5 + i; // Excel row 6 is index 5\r\n    aoa[r][1] = row.name || \"\"; // B\r\n    aoa[r][2] = \"\"; // C (merged with B)\r\n    aoa[r][3] = row.classification || \"\"; // D\r\n    aoa[r][4] = row.days[0]?.on || \"\"; // E (date 1 ON)\r\n    aoa[r][5] = row.days[0]?.off || \"\"; // F (date 1 OFF)\r\n    aoa[r][6] = row.days[1]?.on || \"\"; // G (date 2 ON)\r\n    aoa[r][7] = row.days[1]?.off || \"\"; // H (date 2 OFF)\r\n  }\r\n\r\n  // Calculate total hours\r\n  const totalHours = calculateTotalHours(data);\r\n\r\n  // Total Hours row (row 29)\r\n  aoa[28][1] = \"Total Hours\";\r\n  aoa[28][2] = totalHours;\r\n\r\n  // Write AoA to worksheet\r\n  XLSX.utils.sheet_add_aoa(ws, aoa);\r\n\r\n  // Merge B & C for names\r\n  for (let r = 6; r <= 25; r++) {\r\n    if (!ws['!merges']) ws['!merges'] = [];\r\n    ws['!merges'].push({ s: { r: r - 1, c: 1 }, e: { r: r - 1, c: 2 } });\r\n  }\r\n\r\n  // Set column widths\r\n  ws['!cols'] = [\r\n    { wpx: 10 },   // A\r\n    { wpx: 120 },  // B (Name)\r\n    { wpx: 120 },  // C (Name merged)\r\n    { wpx: 60 },   // D (Class)\r\n    { wpx: 50 },   // E (ON 1)\r\n    { wpx: 50 },   // F (OFF 1)\r\n    { wpx: 50 },   // G (ON 2)\r\n    { wpx: 50 },   // H (OFF 2)\r\n  ];\r\n\r\n  // Highlight row 6, E-H (yellow)\r\n  for (let c = 4; c <= 7; c++) {\r\n    const cell = XLSX.utils.encode_cell({ r: 5, c });\r\n    if (!ws[cell]) ws[cell] = { t: 's', v: '' };\r\n    ws[cell].s = { fill: { fgColor: { rgb: 'FFFF00' } } };\r\n  }\r\n\r\n  // Set time format for ON/OFF cells\r\n  for (let r = 6; r <= 25; r++) {\r\n    for (let c of [4, 5, 6, 7]) {\r\n      const cell = XLSX.utils.encode_cell({ r: r - 1, c });\r\n      if (ws[cell]) ws[cell].z = 'h:mm';\r\n    }\r\n  }\r\n\r\n  // Create workbook\r\n  const wb = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(wb, ws, \"Crew Time Report\");\r\n  return wb;\r\n}\r\n\r\n// Add deep comparison utility\r\nfunction deepEqual(obj1: any, obj2: any): boolean {\r\n  if (obj1 === obj2) return true;\r\n  if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {\r\n    return false;\r\n  }\r\n  \r\n  const keys1 = Object.keys(obj1);\r\n  const keys2 = Object.keys(obj2);\r\n  \r\n  if (keys1.length !== keys2.length) return false;\r\n  \r\n  for (const key of keys1) {\r\n    if (!keys2.includes(key)) return false;\r\n    if (!deepEqual(obj1[key], obj2[key])) return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nexport default function MainTable() {\r\n  const [data, setData] = useState<CrewMember[]>(() => {\r\n    const loadedData = loadData();\r\n    return Array.isArray(loadedData) ? loadedData : defaultData;\r\n  });\r\n  \r\n  const [dayCount, setDayCount] = useState(() => {\r\n    return data[0]?.days?.length || 2;\r\n  });\r\n  \r\n  const [days, setDays] = useState<string[]>(() => {\r\n    const loadedDates = data[0]?.days?.map(d => d.date);\r\n    return Array.isArray(loadedDates) && loadedDates.length === 2 ? loadedDates : ['', ''];\r\n  });\r\n  const [showSaveDefault, setShowSaveDefault] = useState(false);\r\n  const [crewInfo, setCrewInfo] = useState<CrewInfo>({\r\n    crewName: '',\r\n    crewNumber: '',\r\n    fireName: '',\r\n    fireNumber: ''\r\n  });\r\n  const [editingCell, setEditingCell] = useState<EditingCell | null>(null);\r\n  const [lastTap, setLastTap] = useState<number>(0);\r\n  const [savedDates, setSavedDates] = useState<string[]>([]);\r\n  const [selectedDate, setSelectedDate] = useState<string>('');\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n  const [notification, setNotification] = useState<NotificationState>({\r\n    message: '',\r\n    type: 'info',\r\n    show: false\r\n  });\r\n\r\n  // Add state to track last saved version\r\n  const [lastSavedState, setLastSavedState] = useState({\r\n    data: data,\r\n    crewInfo: crewInfo,\r\n    days: days\r\n  });\r\n\r\n  const [currentDateIndex, setCurrentDateIndex] = useState<number>(-1);\r\n\r\n  // Calculate total hours whenever data changes\r\n  const totalHours = calculateTotalHours(data);\r\n\r\n  // Add state to track last saved version\r\n  const [lastSavedTotalHours, setLastSavedTotalHours] = useState(0);\r\n\r\n  // Add state to track last saved crew info\r\n  const [lastSavedCrewInfo, setLastSavedCrewInfo] = useState<CrewInfo>({\r\n    crewName: '',\r\n    crewNumber: '',\r\n    fireName: '',\r\n    fireNumber: ''\r\n  });\r\n\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n  const [showCustomDatePicker, setShowCustomDatePicker] = useState<number | null>(null);\r\n\r\n  const [showPDFViewer, setShowPDFViewer] = useState(false);\r\n  const [pdfId, setPdfId] = useState<string | null>(null);\r\n\r\n  // Add a new state to track PDFs for specific date ranges\r\n  const [pdfsByDateRange, setPdfsByDateRange] = useState<Record<string, string>>({});\r\n\r\n  // Add state for tracking if we're in signing mode\r\n  const [isSigningMode, setIsSigningMode] = useState(false);\r\n\r\n  // Load saved dates on component mount\r\n  useEffect(() => {\r\n    loadSavedDates();\r\n  }, []);\r\n\r\n  // Update lastSavedState when data is loaded\r\n  useEffect(() => {\r\n    setLastSavedState({\r\n      data: [...data],\r\n      crewInfo: { ...crewInfo },\r\n      days: [...days]\r\n    });\r\n  }, []);\r\n\r\n  // Update lastSavedTotalHours when data is loaded\r\n  useEffect(() => {\r\n    setLastSavedTotalHours(totalHours);\r\n  }, []);\r\n\r\n  // Replace the existing useEffect for change tracking\r\n  useEffect(() => {\r\n    // Check if we have all required crew info\r\n    const hasCrewInfo = Boolean(\r\n      crewInfo.crewName && \r\n      crewInfo.crewNumber && \r\n      crewInfo.fireName && \r\n      crewInfo.fireNumber\r\n    );\r\n\r\n    // Check if we have both dates\r\n    const hasDates = Boolean(days[0] && days[1]);\r\n\r\n    // Check if total hours have changed\r\n    const hoursChanged = Math.abs(totalHours - lastSavedTotalHours) > 0.01;\r\n\r\n    // Check if crew info has changed\r\n    const crewInfoChanged = Boolean(\r\n      crewInfo.crewName !== lastSavedCrewInfo.crewName ||\r\n      crewInfo.crewNumber !== lastSavedCrewInfo.crewNumber ||\r\n      crewInfo.fireName !== lastSavedCrewInfo.fireName ||\r\n      crewInfo.fireNumber !== lastSavedCrewInfo.fireNumber\r\n    );\r\n\r\n    // Only set hasUnsavedChanges if we have required fields and either hours or crew info changed\r\n    const hasChanges = Boolean(\r\n      (hoursChanged || crewInfoChanged) && \r\n      hasCrewInfo && \r\n      hasDates\r\n    );\r\n\r\n    setHasUnsavedChanges(hasChanges);\r\n  }, [totalHours, crewInfo, days, lastSavedTotalHours, lastSavedCrewInfo]);\r\n\r\n  const loadSavedDates = async () => {\r\n    try {\r\n      const dateRanges = await ctrDataService.getAllDateRanges();\r\n      setSavedDates(dateRanges);\r\n    } catch (error) {\r\n      console.error('Error loading saved dates:', error);\r\n    }\r\n  };\r\n\r\n  const showNotification = (message: string, type: 'success' | 'info' | 'warning' | 'error') => {\r\n    setNotification({ message, type, show: true });\r\n  };\r\n\r\n  const hideNotification = () => {\r\n    setNotification(prev => ({ ...prev, show: false }));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!days[0] || !days[1]) {\r\n      showNotification('Please select both dates before saving.', 'warning');\r\n      return;\r\n    }\r\n    try {\r\n      const date1 = days[0];\r\n      const date2 = days[1];\r\n      await ctrDataService.saveRecord(date1, date2, data, crewInfo);\r\n      await loadSavedDates();\r\n      \r\n      // Update lastSavedTotalHours and lastSavedCrewInfo after successful save\r\n      setLastSavedTotalHours(totalHours);\r\n      setLastSavedCrewInfo({ ...crewInfo });\r\n      \r\n      setHasUnsavedChanges(false);\r\n      showNotification('Data saved successfully!', 'success');\r\n    } catch (error) {\r\n      console.error('Error saving data:', error);\r\n      showNotification('Failed to save data. Please try again.', 'error');\r\n    }\r\n  };\r\n\r\n  const findCurrentDateIndex = () => {\r\n    if (!selectedDate) return -1;\r\n    return savedDates.findIndex(date => date === selectedDate);\r\n  };\r\n\r\n  const handlePreviousEntry = async () => {\r\n    const currentIndex = findCurrentDateIndex();\r\n    if (currentIndex > 0) {\r\n      const prevDateRange = savedDates[currentIndex - 1];\r\n      // Reset unsaved changes state before loading new data\r\n      setHasUnsavedChanges(false);\r\n      await handleDateSelect(prevDateRange);\r\n    }\r\n  };\r\n\r\n  const handleNextEntry = async () => {\r\n    const currentIndex = findCurrentDateIndex();\r\n    if (currentIndex < savedDates.length - 1) {\r\n      const nextDateRange = savedDates[currentIndex + 1];\r\n      // Reset unsaved changes state before loading new data\r\n      setHasUnsavedChanges(false);\r\n      await handleDateSelect(nextDateRange);\r\n    }\r\n  };\r\n\r\n  const handleDateSelect = async (dateRange: string) => {\r\n    if (dateRange === \"new\") {\r\n      if (hasUnsavedChanges) {\r\n        showNotification('You have unsaved changes. Please save or discard them before starting a new entry.', 'warning');\r\n        return;\r\n      }\r\n      setData(defaultData);\r\n      setCrewInfo({\r\n        crewName: '',\r\n        crewNumber: '',\r\n        fireName: '',\r\n        fireNumber: ''\r\n      });\r\n      setDays(['', '']);\r\n      setSelectedDate('');\r\n      setCurrentDateIndex(-1);\r\n      setHasUnsavedChanges(false);\r\n      setLastSavedTotalHours(0);\r\n      setLastSavedCrewInfo({\r\n        crewName: '',\r\n        crewNumber: '',\r\n        fireName: '',\r\n        fireNumber: ''\r\n      });\r\n      setPdfId(null); // Reset PDF ID for new entry\r\n      showNotification('New entry started', 'info');\r\n      return;\r\n    }\r\n\r\n    if (hasUnsavedChanges) {\r\n      showNotification('You have unsaved changes. Please save or discard them before loading another date range.', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const record = await ctrDataService.getRecord(dateRange);\r\n      if (record) {\r\n        setData(record.data);\r\n        setCrewInfo(record.crewInfo);\r\n        const [date1, date2] = record.dateRange.split(' to ');\r\n        setDays([date1, date2]);\r\n        setSelectedDate(dateRange);\r\n        setCurrentDateIndex(savedDates.indexOf(dateRange));\r\n        setHasUnsavedChanges(false);\r\n        \r\n        // Update lastSavedTotalHours and lastSavedCrewInfo with the loaded data\r\n        const loadedTotalHours = calculateTotalHours(record.data);\r\n        setLastSavedTotalHours(loadedTotalHours);\r\n        setLastSavedCrewInfo({ ...record.crewInfo });\r\n        \r\n        // Set the PDF ID for this date range if it exists\r\n        setPdfId(pdfsByDateRange[dateRange] || null);\r\n        \r\n        showNotification('Data loaded successfully', 'success');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading selected date range:', error);\r\n      showNotification('Failed to load data. Please try again.', 'error');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveData(data);\r\n  }, [data]);\r\n\r\n  const handleCellDoubleTap = (rowIdx: number, field: string, dayIdx?: number) => {\r\n    const now = Date.now();\r\n    if (now - lastTap < 300) { // Double tap detected\r\n      setEditingCell({ row: rowIdx, field, dayIdx });\r\n    }\r\n    setLastTap(now);\r\n  };\r\n\r\n  const handleCellDoubleClick = (rowIdx: number, field: string, dayIdx?: number) => {\r\n    setEditingCell({ row: rowIdx, field, dayIdx });\r\n  };\r\n\r\n  const validateMilitaryTime = (value: string): boolean => {\r\n    if (!value) return true;\r\n    \r\n    // Must be exactly 4 digits\r\n    if (value.length > 4) return false;\r\n    \r\n    // Convert to array of digits\r\n    const digits = value.split('').map(Number);\r\n    \r\n    // First digit must be 0-2\r\n    if (digits[0] > 2) return false;\r\n    \r\n    // Second digit rules based on first digit\r\n    if (digits[0] === 2 && digits[1] > 3) return false;\r\n    \r\n    // Third digit must be 0-5\r\n    if (digits[2] > 5) return false;\r\n    \r\n    return true;\r\n  };\r\n\r\n  const copyFFTTimes = () => {\r\n    // Find the first FFT1 or FFT2 entry\r\n    const fftIndex = data.findIndex(member => \r\n      member.classification?.toUpperCase().includes('FFT1') || \r\n      member.classification?.toUpperCase().includes('FFT2')\r\n    );\r\n\r\n    if (fftIndex === -1) {\r\n      alert('Please enter an FFT1 or FFT2 classification first.');\r\n      return;\r\n    }\r\n\r\n    if (!data[fftIndex].name) {\r\n      alert('Please enter the FFT name first.');\r\n      return;\r\n    }\r\n\r\n    const fftTimes = data[fftIndex].days;\r\n    const newData = data.map((member, index) => {\r\n      if (index <= fftIndex) return member; // Skip crew boss and FFT\r\n      return {\r\n        ...member,\r\n        days: fftTimes.map(day => ({ ...day }))\r\n      };\r\n    });\r\n\r\n    setData(newData);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleCellEdit = (e: React.ChangeEvent<HTMLInputElement>, rowIdx: number, field: string, dayIdx?: number) => {\r\n    const { value } = e.target;\r\n    \r\n    // Validate military time for on/off fields\r\n    if ((field === 'on' || field === 'off')) {\r\n      // Only allow digits\r\n      if (!/^\\d*$/.test(value)) return;\r\n      \r\n      // Apply validation rules\r\n      if (!validateMilitaryTime(value)) return;\r\n    }\r\n\r\n    const newData = [...data];\r\n    \r\n    // Ensure the row exists and has the required structure\r\n    if (!newData[rowIdx]) {\r\n      newData[rowIdx] = {\r\n        name: '',\r\n        classification: '',\r\n        days: days.map(date => ({ date, on: '', off: '' }))\r\n      };\r\n    }\r\n    \r\n    // Ensure days array exists\r\n    if (!newData[rowIdx].days) {\r\n      newData[rowIdx].days = days.map(date => ({ date, on: '', off: '' }));\r\n    }\r\n    \r\n    if (dayIdx !== undefined) {\r\n      // Ensure the day object exists\r\n      if (!newData[rowIdx].days[dayIdx]) {\r\n        newData[rowIdx].days[dayIdx] = { date: days[dayIdx] || '', on: '', off: '' };\r\n      }\r\n      newData[rowIdx].days[dayIdx][field as keyof Day] = value;\r\n\r\n      // If this is the second row (index 1) and we're editing ON/OFF times\r\n      if (rowIdx === 1) {\r\n        // Copy these times to all subsequent rows that have names\r\n        for (let i = 2; i < newData.length; i++) {\r\n          if (newData[i]?.name) {\r\n            if (!newData[i].days[dayIdx]) {\r\n              newData[i].days[dayIdx] = { date: days[dayIdx] || '', on: '', off: '' };\r\n            }\r\n            newData[i].days[dayIdx][field as keyof Day] = value;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      (newData[rowIdx] as any)[field] = value;\r\n\r\n      // If this is a name field and it's not the first FFT1/FFT2, copy their times\r\n      if (field === 'name' && value) {\r\n        const fftIndex = newData.findIndex(member => \r\n          member?.classification?.toUpperCase().includes('FFT1') || \r\n          member?.classification?.toUpperCase().includes('FFT2')\r\n        );\r\n\r\n        if (fftIndex !== -1 && rowIdx > fftIndex && newData[fftIndex]?.days) {\r\n          const fftTimes = newData[fftIndex].days;\r\n          newData[rowIdx].days = fftTimes.map(day => ({ ...day }));\r\n        }\r\n      }\r\n    }\r\n    \r\n    setData(newData);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleCellBlur = () => {\r\n    setTimeout(() => {\r\n      setEditingCell(null);\r\n    }, 200);\r\n  };\r\n\r\n  const handleDelete = (idx: number) => {\r\n    const newData = data.filter((_, i) => i !== idx);\r\n    setData(newData);\r\n  };\r\n\r\n  const handleHeaderDateChange = (e: React.ChangeEvent<HTMLInputElement>, idx: number) => {\r\n    const newDate = e.target.value;\r\n    setDays(prev => prev.map((d, i) => (i === idx ? newDate : d)));\r\n    setData(data => data.map(row => ({\r\n      ...row,\r\n      days: row.days.map((day, i) => i === idx ? { ...day, date: newDate } : day)\r\n    })));\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleResetToDefault = () => {\r\n    setData(defaultData);\r\n    saveData(defaultData);\r\n    setShowSaveDefault(false);\r\n    showNotification('Restored to original default data!', 'info');\r\n  };\r\n\r\n  const handleSaveDefault = () => {\r\n    saveData(data);\r\n    setShowSaveDefault(false);\r\n    showNotification('Current table saved as default!', 'success');\r\n  };\r\n\r\n  const handleExportExcel = async () => {\r\n    try {\r\n      // Validate required data before attempting Excel generation\r\n      if (!days[0] || !days[1]) {\r\n        showNotification('Please select both dates before generating Excel.', 'warning');\r\n        return;\r\n      }\r\n\r\n      if (!crewInfo.crewNumber || !crewInfo.fireName || !crewInfo.fireNumber) {\r\n        showNotification('Please fill in all crew and fire information before generating Excel.', 'warning');\r\n        return;\r\n      }\r\n\r\n      // Check if there's any crew member data\r\n      const hasCrewData = data.some(member => \r\n        member.name && member.classification && \r\n        member.days.some(day => day.on || day.off)\r\n      );\r\n\r\n      if (!hasCrewData) {\r\n        showNotification('Please enter at least one crew member\\'s information before generating Excel.', 'warning');\r\n        return;\r\n      }\r\n\r\n      showNotification('Generating Excel...', 'info');\r\n      \r\n      const wb = await fillExcelTemplate(data, crewInfo, days, '/CTR_Template.xlsx');\r\n      XLSX.writeFile(wb, generateExportFilename({\r\n        date: days[0],\r\n        crewNumber: crewInfo.crewNumber,\r\n        fireName: crewInfo.fireName,\r\n        fireNumber: crewInfo.fireNumber,\r\n        type: 'Excel'\r\n      }));\r\n      showNotification('Excel file generated successfully!', 'success');\r\n    } catch (error) {\r\n      console.error('Error generating Excel:', error);\r\n      let errorMessage = 'Failed to generate Excel file. ';\r\n      \r\n      if (error instanceof Error) {\r\n        if (error.message.includes('network') || error.message.includes('fetch')) {\r\n          errorMessage += 'Please check your internet connection and try again.';\r\n        } else if (error.message.includes('template')) {\r\n          errorMessage += 'The Excel template could not be loaded. Please try refreshing the page.';\r\n        } else {\r\n          errorMessage += 'An unexpected error occurred. Please try again.';\r\n        }\r\n      }\r\n      \r\n      showNotification(errorMessage, 'error');\r\n    }\r\n  };\r\n\r\n  const handleExportPDF = async () => {\r\n    try {\r\n      // Generate PDF without immediate download\r\n      const result = await fillCTRPDF(data, crewInfo, { \r\n        downloadImmediately: false,\r\n        returnBlob: false\r\n      });\r\n\r\n      // Store the PDF ID for the current date range\r\n      const currentDateRange = `${days[0]} to ${days[1]}`;\r\n      setPdfsByDateRange(prev => ({\r\n        ...prev,\r\n        [currentDateRange]: result.pdfId\r\n      }));\r\n      setPdfId(result.pdfId);\r\n      showNotification('PDF generated successfully. Click below to view and sign.', 'success');\r\n    } catch (error) {\r\n      console.error('Error exporting PDF:', error);\r\n      showNotification('Failed to export PDF. Please try again.', 'error');\r\n    }\r\n  };\r\n\r\n  const handleExcelUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n    \r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      try {\r\n        const data = evt.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        \r\n        // Use the mapping utility to extract data\r\n        const { crewInfo: importedCrewInfo, crewMembers } = mapExcelToData(worksheet);\r\n        \r\n        // Update the application state\r\n        setCrewInfo(importedCrewInfo);\r\n        setData(crewMembers);\r\n        \r\n        // Extract dates from the first crew member's days\r\n        if (crewMembers.length > 0) {\r\n          const dates = crewMembers[0].days.map(d => d.date);\r\n          setDays(dates);\r\n          setDayCount(dates.length);\r\n        }\r\n        \r\n        setShowSaveDefault(true);\r\n        showNotification('Excel file imported successfully', 'success');\r\n      } catch (error) {\r\n        console.error('Error importing Excel file:', error);\r\n        showNotification('Error importing Excel file. Please check the file format.', 'error');\r\n      }\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleCopyToNextDay = async () => {\r\n    if (!days[0] || !days[1]) {\r\n      showNotification('Please set both dates before copying to next days.', 'warning');\r\n      return;\r\n    }\r\n\r\n    // Validate that we have crew data\r\n    const hasCrewData = data.some(member => \r\n      member.name && member.classification\r\n    );\r\n\r\n    if (!hasCrewData) {\r\n      showNotification('Please enter crew information before copying to next days.', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      showNotification('Copying data to next 20 days...', 'info');\r\n      \r\n      // Get the base dates\r\n      const startDate = new Date(days[0]);\r\n      const endDate = new Date(days[1]);\r\n      const daysDiff = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n\r\n      // Copy data for next 20 days\r\n      for (let i = 0; i < 20; i++) {\r\n        // Calculate new date range starting from the day after date2\r\n        const newStartDate = new Date(endDate);\r\n        newStartDate.setDate(newStartDate.getDate() + 1 + (i * (daysDiff + 1)));\r\n        \r\n        const newEndDate = new Date(newStartDate);\r\n        newEndDate.setDate(newEndDate.getDate() + daysDiff);\r\n\r\n        const newStartDateStr = newStartDate.toISOString().split('T')[0];\r\n        const newEndDateStr = newEndDate.toISOString().split('T')[0];\r\n\r\n        // Create new data with updated dates but empty time entries\r\n        const newData = data.map(member => ({\r\n          name: member.name,\r\n          classification: member.classification,\r\n          days: [\r\n            { date: newStartDateStr, on: '', off: '' },\r\n            { date: newEndDateStr, on: '', off: '' }\r\n          ]\r\n        }));\r\n\r\n        // Save the new date range\r\n        await ctrDataService.saveRecord(newStartDateStr, newEndDateStr, newData, crewInfo);\r\n      }\r\n\r\n      // Reload saved dates\r\n      await loadSavedDates();\r\n      setCurrentDateIndex(findCurrentDateIndex());\r\n      showNotification('Successfully copied crew information to next 20 days!', 'success');\r\n    } catch (error) {\r\n      console.error('Error copying data to next days:', error);\r\n      showNotification('Failed to copy data to next days. Please try again.', 'error');\r\n    }\r\n  };\r\n\r\n  const handleRemoveEntry = async () => {\r\n    if (!selectedDate) {\r\n      showNotification('Please select a date range to remove.', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (hasUnsavedChanges) {\r\n      showNotification('Please save or discard your changes before removing an entry.', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await ctrDataService.deleteRecord(selectedDate);\r\n      // Remove the PDF ID for this date range\r\n      setPdfsByDateRange(prev => {\r\n        const newPdfsByDateRange = { ...prev };\r\n        delete newPdfsByDateRange[selectedDate];\r\n        return newPdfsByDateRange;\r\n      });\r\n      await loadSavedDates();\r\n      setSelectedDate('');\r\n      setCurrentDateIndex(-1);\r\n      setData(defaultData);\r\n      setCrewInfo({\r\n        crewName: '',\r\n        crewNumber: '',\r\n        fireName: '',\r\n        fireNumber: ''\r\n      });\r\n      setDays(['', '']);\r\n      setPdfId(null);\r\n      showNotification('Entry removed successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error removing entry:', error);\r\n      showNotification('Failed to remove entry. Please try again.', 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ctr-container\">\r\n      {notification.show && (\r\n        <Notification\r\n          message={notification.message}\r\n          type={notification.type}\r\n          onClose={hideNotification}\r\n        />\r\n      )}\r\n      <h2 className=\"ctr-title\">Crew Time Report Table</h2>\r\n      \r\n      {/* Date Selection and Save Controls */}\r\n      <div className=\"ctr-date-controls\">\r\n        <div className=\"ctr-date-selector\">\r\n          <select \r\n            value={selectedDate}\r\n            onChange={(e) => handleDateSelect(e.target.value)}\r\n            className=\"ctr-select\"\r\n          >\r\n            <option value=\"new\">New Entry</option>\r\n            <option value=\"\">Select a saved date range...</option>\r\n            {savedDates.map(dateRange => {\r\n              const [date1, date2] = dateRange.split(' to ');\r\n              return (\r\n                <option key={dateRange} value={dateRange}>\r\n                  {date1} to {date2}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n          <button \r\n            className=\"ctr-btn calendar-btn\"\r\n            onClick={() => setShowCalendar(true)}\r\n            title=\"Open Calendar View\"\r\n          >\r\n            📅\r\n          </button>\r\n        </div>\r\n        <div className=\"ctr-navigation-buttons\">\r\n          <button \r\n            className=\"ctr-btn nav-btn\" \r\n            onClick={handlePreviousEntry}\r\n            disabled={currentDateIndex <= 0}\r\n          >\r\n            ← Previous\r\n          </button>\r\n          <button \r\n            className=\"ctr-btn nav-btn\" \r\n            onClick={handleNextEntry}\r\n            disabled={currentDateIndex >= savedDates.length - 1}\r\n          >\r\n            Next →\r\n          </button>\r\n        </div>\r\n        <button \r\n          className=\"ctr-btn copy-btn\" \r\n          onClick={handleCopyToNextDay}\r\n          disabled={!days[1]}\r\n        >\r\n          Copy to Next 20 Days\r\n        </button>\r\n        <button \r\n          className=\"ctr-btn save-btn\" \r\n          onClick={handleSave}\r\n          disabled={!hasUnsavedChanges || !days[0] || !days[1]}\r\n        >\r\n          {hasUnsavedChanges ? 'Save Changes' : 'Saved'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"ctr-crew-info-form\">\r\n        <input\r\n          className=\"ctr-input\"\r\n          placeholder=\"Crew Name\"\r\n          value={crewInfo.crewName}\r\n          onChange={e => setCrewInfo({ ...crewInfo, crewName: e.target.value })}\r\n        />\r\n        <input\r\n          className=\"ctr-input\"\r\n          placeholder=\"Crew Number\"\r\n          value={crewInfo.crewNumber}\r\n          onChange={e => setCrewInfo({ ...crewInfo, crewNumber: e.target.value })}\r\n        />\r\n        <input\r\n          className=\"ctr-input\"\r\n          placeholder=\"Fire Name\"\r\n          value={crewInfo.fireName}\r\n          onChange={e => setCrewInfo({ ...crewInfo, fireName: e.target.value })}\r\n        />\r\n        <input\r\n          className=\"ctr-input\"\r\n          placeholder=\"Fire Number\"\r\n          value={crewInfo.fireNumber}\r\n          onChange={e => setCrewInfo({ ...crewInfo, fireNumber: e.target.value })}\r\n        />\r\n      </div>\r\n      <div className=\"ctr-actions\">\r\n        <input type=\"file\" accept=\".xlsx\" onChange={handleExcelUpload} />\r\n        <button className=\"ctr-btn\" onClick={handleExportExcel}>Export Excel</button>\r\n        <button className=\"ctr-btn\" onClick={handleExportPDF}>Save to PDF</button>\r\n        {showSaveDefault && (\r\n          <button className=\"ctr-btn\" onClick={handleSaveDefault} style={{ background: '#388e3c' }}>Save as Default</button>\r\n        )}\r\n        <button className=\"ctr-btn\" onClick={handleResetToDefault} style={{ background: '#888' }}>Reset to Default</button>\r\n        <button \r\n          className=\"ctr-btn\" \r\n          onClick={handleRemoveEntry}\r\n          disabled={!selectedDate}\r\n          style={{ background: '#d32f2f' }}\r\n        >\r\n          Remove Entry\r\n        </button>\r\n      </div>\r\n      <div style={{ overflowX: 'auto', maxWidth: '100%' }}>\r\n        <table className=\"ctr-table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"ctr-th name\" rowSpan={2}>NAME</th>\r\n              <th className=\"ctr-th class\" rowSpan={2}>CLASS</th>\r\n              {days.map((date, i) => (\r\n                <th className=\"ctr-th date\" colSpan={2} key={i} style={{ textAlign: 'center' }}>\r\n                  DATE<br />\r\n                  <input\r\n                    className=\"ctr-input ctr-date\"\r\n                    type=\"date\"\r\n                    value={date}\r\n                    onChange={e => handleHeaderDateChange(e, i)}\r\n                    style={{ fontWeight: 'bold', fontSize: 14, textAlign: 'center', background: 'transparent', border: 'none', borderBottom: '1.5px solid #d32f2f' }}\r\n                  />\r\n                </th>\r\n              ))}\r\n              <th className=\"ctr-th\" rowSpan={2}></th>\r\n            </tr>\r\n            <tr>\r\n              {days.map((_, i) => (\r\n                <React.Fragment key={i}>\r\n                  <th className=\"ctr-th\">ON</th>\r\n                  <th className=\"ctr-th\">OFF</th>\r\n                </React.Fragment>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from({ length: 20 }).map((_, idx) => {\r\n              const row = data[idx] || {\r\n                name: '',\r\n                classification: '',\r\n                days: days.map(date => ({ date, on: '', off: '' }))\r\n              };\r\n              \r\n              return (\r\n                <tr key={idx} className=\"ctr-tr\">\r\n                  <td className=\"ctr-td\">\r\n                    {editingCell?.row === idx && editingCell?.field === 'name' ? (\r\n                      <input\r\n                        className=\"ctr-input\"\r\n                        value={row.name || ''}\r\n                        onChange={e => handleCellEdit(e, idx, 'name')}\r\n                        onBlur={handleCellBlur}\r\n                        autoFocus\r\n                      />\r\n                    ) : (\r\n                      <div \r\n                        className=\"ctr-cell-content\"\r\n                        onDoubleClick={() => handleCellDoubleClick(idx, 'name')}\r\n                        onTouchStart={() => handleCellDoubleTap(idx, 'name')}\r\n                      >\r\n                        {row.name || ''}\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"ctr-td\">\r\n                    {editingCell?.row === idx && editingCell?.field === 'classification' ? (\r\n                      <input\r\n                        className=\"ctr-input\"\r\n                        value={row.classification}\r\n                        onChange={e => handleCellEdit(e, idx, 'classification')}\r\n                        onBlur={handleCellBlur}\r\n                        autoFocus\r\n                      />\r\n                    ) : (\r\n                      <div \r\n                        className=\"ctr-cell-content\"\r\n                        onDoubleClick={() => handleCellDoubleClick(idx, 'classification')}\r\n                        onTouchStart={() => handleCellDoubleTap(idx, 'classification')}\r\n                      >\r\n                        {row.classification}\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                  {row.days.map((day, dayIdx) => (\r\n                    <React.Fragment key={dayIdx}>\r\n                      <td className=\"ctr-td\">\r\n                        {editingCell?.row === idx && editingCell?.field === 'on' && editingCell?.dayIdx === dayIdx ? (\r\n                          <input\r\n                            className=\"ctr-input ctr-on\"\r\n                            value={day.on}\r\n                            onChange={e => handleCellEdit(e, idx, 'on', dayIdx)}\r\n                            onBlur={handleCellBlur}\r\n                            autoFocus\r\n                            placeholder=\"HHMM\"\r\n                            maxLength={4}\r\n                            inputMode=\"numeric\"\r\n                            pattern=\"[0-9]*\"\r\n                          />\r\n                        ) : (\r\n                          <div \r\n                            className=\"ctr-cell-content\"\r\n                            onDoubleClick={() => handleCellDoubleClick(idx, 'on', dayIdx)}\r\n                            onTouchStart={() => handleCellDoubleTap(idx, 'on', dayIdx)}\r\n                          >\r\n                            {day.on}\r\n                          </div>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"ctr-td\">\r\n                        {editingCell?.row === idx && editingCell?.field === 'off' && editingCell?.dayIdx === dayIdx ? (\r\n                          <input\r\n                            className=\"ctr-input ctr-off\"\r\n                            value={day.off}\r\n                            onChange={e => handleCellEdit(e, idx, 'off', dayIdx)}\r\n                            onBlur={handleCellBlur}\r\n                            autoFocus\r\n                            placeholder=\"HHMM\"\r\n                            maxLength={4}\r\n                            inputMode=\"numeric\"\r\n                            pattern=\"[0-9]*\"\r\n                          />\r\n                        ) : (\r\n                          <div \r\n                            className=\"ctr-cell-content\"\r\n                            onDoubleClick={() => handleCellDoubleClick(idx, 'off', dayIdx)}\r\n                            onTouchStart={() => handleCellDoubleTap(idx, 'off', dayIdx)}\r\n                          >\r\n                            {day.off}\r\n                          </div>\r\n                        )}\r\n                      </td>\r\n                    </React.Fragment>\r\n                  ))}\r\n                  <td className=\"ctr-td\">\r\n                    {data[idx] && (\r\n                      <button \r\n                        className=\"ctr-btn\" \r\n                        style={{ background: '#d32f2f', padding: '2px 6px' }} \r\n                        onClick={() => handleDelete(idx)}\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Total Hours Display */}\r\n      <div className=\"ctr-total-hours\">\r\n        <div className=\"ctr-total-label\">Total Hours Worked:</div>\r\n        <div className=\"ctr-total-value\">{totalHours.toFixed(2)}</div>\r\n      </div>\r\n\r\n      {/* PDF Viewer Section */}\r\n      {pdfId && (\r\n        <div className=\"ctr-pdf-section\">\r\n          <h3>Generated PDF</h3>\r\n          <div className=\"ctr-pdf-buttons\">\r\n            <button \r\n              className=\"ctr-btn view-pdf-btn\" \r\n              onClick={() => {\r\n                setIsSigningMode(false);\r\n                setShowPDFViewer(true);\r\n              }}\r\n            >\r\n              View PDF\r\n            </button>\r\n            <button \r\n              className=\"ctr-btn sign-pdf-btn\" \r\n              onClick={() => {\r\n                setIsSigningMode(true);\r\n                setShowPDFViewer(true);\r\n              }}\r\n            >\r\n              Sign PDF\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showCalendar && (\r\n        <DateCalendar\r\n          savedDates={savedDates}\r\n          onDateSelect={handleDateSelect}\r\n          onClose={() => setShowCalendar(false)}\r\n        />\r\n      )}\r\n\r\n      {showCustomDatePicker !== null && (\r\n        <div className=\"custom-date-picker\">\r\n          <input\r\n            type=\"date\"\r\n            value={days[showCustomDatePicker]}\r\n            onChange={(e) => {\r\n              const newDate = e.target.value;\r\n              setDays(prev => prev.map((d, i) => (i === showCustomDatePicker ? newDate : d)));\r\n              setData(data => data.map(row => ({\r\n                ...row,\r\n                days: row.days.map((day, i) => i === showCustomDatePicker ? { ...day, date: newDate } : day)\r\n              })));\r\n              setHasUnsavedChanges(true);\r\n              setShowCustomDatePicker(null);\r\n            }}\r\n            onBlur={() => setShowCustomDatePicker(null)}\r\n            autoFocus\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {showPDFViewer && pdfId && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content pdf-modal\">\r\n            <button \r\n              className=\"modal-close-btn\"\r\n              onClick={() => {\r\n                setShowPDFViewer(false);\r\n                setIsSigningMode(false);\r\n              }}\r\n            >\r\n              ×\r\n            </button>\r\n            <EnhancedPDFViewer\r\n              pdfId={pdfId}\r\n              readOnly={!isSigningMode}\r\n              onSave={async (blob) => {\r\n                try {\r\n                  // Store the annotated version with the same ID to overwrite the original\r\n                  const currentDateRange = `${days[0]} to ${days[1]}`;\r\n                  const newPdfId = await storePDF(blob, {\r\n                    filename: generateExportFilename({\r\n                      date: days[0],\r\n                      crewNumber: crewInfo.crewNumber,\r\n                      fireName: crewInfo.fireName,\r\n                      fireNumber: crewInfo.fireNumber,\r\n                      type: 'PDF'\r\n                    }),\r\n                    date: days[0],\r\n                    crewNumber: crewInfo.crewNumber,\r\n                    fireName: crewInfo.fireName,\r\n                    fireNumber: crewInfo.fireNumber\r\n                  });\r\n\r\n                  // Update the PDF ID in our state\r\n                  setPdfsByDateRange(prev => ({\r\n                    ...prev,\r\n                    [currentDateRange]: newPdfId\r\n                  }));\r\n                  setPdfId(newPdfId);\r\n                  \r\n                  setShowPDFViewer(false);\r\n                  setIsSigningMode(false);\r\n                  showNotification('PDF saved with signature', 'success');\r\n                } catch (error) {\r\n                  console.error('Error saving signed PDF:', error);\r\n                  showNotification('Failed to save signed PDF', 'error');\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Add these styles to MainTable.css\r\nconst styles = `\r\n.ctr-date-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.ctr-select {\r\n  padding: 0.5rem;\r\n  font-size: 1rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  min-width: 200px;\r\n  background-color: white;\r\n}\r\n\r\n.ctr-select:focus {\r\n  outline: none;\r\n  border-color: #d32f2f;\r\n}\r\n\r\n.calendar-btn {\r\n  padding: 0.5rem;\r\n  font-size: 1.2rem;\r\n  background: none;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.calendar-btn:hover {\r\n  background-color: #f5f5f5;\r\n  border-color: #d32f2f;\r\n}\r\n\r\n.ctr-signature-section {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n}\r\n\r\n.ctr-signature-display {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 20px;\r\n}\r\n\r\n.ctr-signature-content {\r\n  flex: 1;\r\n}\r\n\r\n.ctr-signature-label {\r\n  color: #666;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.ctr-signature-name {\r\n  color: #333;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.ctr-signature-image {\r\n  max-width: 300px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.ctr-signature-image img {\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.signature-btn, .edit-signature-btn {\r\n  background: #1976d2;\r\n  white-space: nowrap;\r\n}\r\n\r\n.signature-btn:hover, .edit-signature-btn:hover {\r\n  background: #1565c0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .ctr-signature-section {\r\n    padding: 10px;\r\n  }\r\n\r\n  .ctr-signature-display {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .ctr-signature-image {\r\n    max-width: 100%;\r\n  }\r\n}\r\n\r\n.custom-date-picker {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.custom-date-picker input {\r\n  font-size: 16px;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.custom-date-picker input:focus {\r\n  outline: none;\r\n  border-color: #d32f2f;\r\n}\r\n`; ","import React from 'react';\r\nimport MainTable from './components/MainTable';\r\n\r\nexport default function App() {\r\n  return <MainTable />;\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles.css';\nimport App from './App';\n\n// Register service worker\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/'\n      });\n      \n      // Check for updates every hour instead of on every load\n      setInterval(() => {\n        registration.update();\n      }, 60 * 60 * 1000);\n\n      // Handle updates more gracefully\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New content is available, but we'll wait for user interaction\n              const reloadConfirm = window.confirm(\n                'New version available! Would you like to update? (Reload required)'\n              );\n              if (reloadConfirm) {\n                window.location.reload();\n              }\n            }\n          });\n        }\n      });\n\n      console.log('SW registered: ', registration);\n    } catch (error) {\n      console.error('SW registration failed: ', error);\n    }\n  });\n} else {\n  console.warn('Service workers are not supported in this browser');\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","defaultData","mapToPDFFields","data","crewInfo","signature","fields","_a","_b","row","idx","rowNum","generateExportFilename","info","date","crewNumber","fireName","fireNumber","type","formattedDate","safeCrewNumber","safeFireName","safeFireNumber","filename","instanceOfAny","object","constructors","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","resolve","reject","unlisten","success","error","wrap","value","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","callback","wrapFunction","func","storeNames","args","unwrap","transformCachableValue","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","openPromise","event","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","DB_NAME","STORE_NAME","DB_VERSION","initDB","storePDF","pdfBlob","metadata","id","getPDF","pdf","fillCTRPDF","options","pdfUrl","basePath","urlWithCacheBust","response","pdfBytes","pdfDoc","PDFDocument","form","field","filledPdfBytes","blob","pdfId","_d","_c","url","CTR_TEMPLATE_MAPPING","fillExcelTemplate","days","templateUrl","mapping","templateData","workbook","XLSX.read","worksheet","startRow","totalHours","calculateTotalHours","total","day","on","parseMilitaryTime","off","time","CTRDataService","date1","date2","dateRange","ranges","ctrDataService","Notification","props","message","onClose","duration","React","timer","jsxs","jsx","EXCEL_CELL_MAPPING","getMergedCellValue","cellAddress","merges","XLSXUtils","XLSX.utils","merge","topLeft","mapExcelToData","crewMembers","nameCell","crewMember","member","onTime","convertToMinutes","offTime","hours","minutes","match","DateCalendar","savedDates","onDateSelect","currentDate","setCurrentDate","useState","selectedDate","setSelectedDate","calendarDays","setCalendarDays","useEffect","year","month","firstDay","lastDay","daysFromPrevMonth","daysFromNextMonth","i","handlePrevMonth","handleNextMonth","handleDateClick","dateStr","matchingDateRange","range","start","end","isDateSaved","isCurrentMonth","index","pdfjsLib.GlobalWorkerOptions","pdfOptions","EnhancedPDFViewer","onSave","className","style","readOnly","canvasRef","useRef","drawCanvasRef","containerRef","pdfDocRef","isLoading","setIsLoading","setError","isDrawing","setIsDrawing","drawColor","setDrawColor","drawWidth","setDrawWidth","lastPosRef","renderPDF","useCallback","page","canvas","context","drawCanvas","drawContext","viewport","container","containerWidth","containerHeight","scale","err","startDrawing","rect","scaleX","scaleY","draw","ctx","currentPos","stopDrawing","clearDrawing","handleSave","annotationImage","firstPage","annotationBytes","annotationPngImage","width","height","modifiedPdfBytes","modifiedPdfBlob","mounted","currentPdf","storedPDF","arrayBuffer","pdfjsLib.getDocument","STORAGE_KEY","saveData","loadData","raw","MainTable","setData","loadedData","dayCount","setDayCount","setDays","loadedDates","showSaveDefault","setShowSaveDefault","setCrewInfo","editingCell","setEditingCell","lastTap","setLastTap","setSavedDates","hasUnsavedChanges","setHasUnsavedChanges","notification","setNotification","lastSavedState","setLastSavedState","currentDateIndex","setCurrentDateIndex","lastSavedTotalHours","setLastSavedTotalHours","lastSavedCrewInfo","setLastSavedCrewInfo","showCalendar","setShowCalendar","showCustomDatePicker","setShowCustomDatePicker","showPDFViewer","setShowPDFViewer","setPdfId","pdfsByDateRange","setPdfsByDateRange","isSigningMode","setIsSigningMode","loadSavedDates","hasCrewInfo","hasDates","hoursChanged","crewInfoChanged","dateRanges","showNotification","hideNotification","prev","findCurrentDateIndex","handlePreviousEntry","currentIndex","prevDateRange","handleDateSelect","handleNextEntry","nextDateRange","record","loadedTotalHours","handleCellDoubleTap","rowIdx","dayIdx","now","handleCellDoubleClick","validateMilitaryTime","digits","handleCellEdit","newData","fftIndex","fftTimes","handleCellBlur","handleDelete","_","handleHeaderDateChange","newDate","handleResetToDefault","handleSaveDefault","handleExportExcel","wb","XLSX.writeFile","errorMessage","handleExportPDF","result","currentDateRange","handleExcelUpload","file","reader","evt","sheetName","importedCrewInfo","dates","handleCopyToNextDay","startDate","endDate","daysDiff","newStartDate","newEndDate","newStartDateStr","newEndDateStr","handleRemoveEntry","newPdfsByDateRange","newPdfId","App","registration","newWorker","ReactDOM"],"mappings":";;;;;;;;GASa,IAAIA,GAAEC,EAAiBC,GAAE,OAAO,IAAI,eAAe,EAAEC,GAAE,OAAO,IAAI,gBAAgB,EAAEC,GAAE,OAAO,UAAU,eAAeC,GAAEL,GAAE,mDAAmD,kBAAkBM,GAAE,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,SAAS,EAAE,EAClP,SAASC,GAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAcJ,IAAT,SAAaG,EAAE,GAAGH,GAAYD,EAAE,MAAX,SAAiBI,EAAE,GAAGJ,EAAE,KAAcA,EAAE,MAAX,SAAiBK,EAAEL,EAAE,KAAK,IAAIE,KAAKF,EAAEL,GAAE,KAAKK,EAAEE,CAAC,GAAG,CAACL,GAAE,eAAeK,CAAC,IAAIC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,GAAGH,GAAGA,EAAE,aAAa,IAAIG,KAAKF,EAAED,EAAE,aAAaC,EAAWG,EAAED,CAAC,IAAZ,SAAgBC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,MAAM,CAAC,SAAST,GAAE,KAAKM,EAAE,IAAIK,EAAE,IAAIC,EAAE,MAAMF,EAAE,OAAOP,GAAE,OAAO,CAAC,aAAkBF,GAAaY,GAAA,IAACR,GAAEQ,GAAA,KAAaR,GCPxWS,GAAA,QAAiBf,0BCDfG,GAAIH,GAEYgB,GAAA,WAAGb,GAAE,WACJa,GAAA,YAAGb,GAAE,YCLnB,MAAMc,EAAc,CACzB,CACE,KAAM,aACN,eAAgB,OAChB,KAAM,CACJ,CAAE,KAAM,aAAc,GAAI,OAAQ,IAAK,MAAO,EAC9C,CAAE,KAAM,aAAc,GAAI,OAAQ,IAAK,MAAO,CAChD,CACF,EACA,CACE,KAAM,WACN,eAAgB,OAChB,KAAM,CACJ,CAAE,KAAM,aAAc,GAAI,OAAQ,IAAK,MAAO,EAC9C,CAAE,KAAM,aAAc,GAAI,OAAQ,IAAK,MAAO,CAChD,CACF,CACF,EChBgB,SAAAC,GAAeC,EAAaC,EAAgBC,EAAiD,SAC3G,MAAMC,EAAiC,CAAA,EAGvC,OAAIF,IACKE,EAAA,aAAa,EAAIF,EAAS,UAAY,GACtCE,EAAA,cAAc,EAAIF,EAAS,YAAc,GACzCE,EAAA,YAAY,EAAIF,EAAS,UAAY,GACrCE,EAAA,eAAe,EAAIF,EAAS,YAAc,KAI/CG,EAAAJ,EAAK,CAAC,IAAN,MAAAI,EAAS,KAAK,KAChBD,EAAO,KAAUH,EAAK,CAAC,EAAE,KAAK,CAAC,EAAE,OAE/BK,EAAAL,EAAK,CAAC,IAAN,MAAAK,EAAS,KAAK,KAChBF,EAAO,OAAYH,EAAK,CAAC,EAAE,KAAK,CAAC,EAAE,MAIhCA,EAAA,QAAQ,CAACM,EAAKC,IAAQ,SAEzB,GAAI,EAACD,GAAA,MAAAA,EAAK,OAAQ,EAACA,GAAA,MAAAA,EAAK,gBAAgB,OAExC,MAAME,EAASD,EAAM,EAGrBJ,EAAO,sBAAsBK,CAAM,EAAE,EAAIF,EAAI,MAAQ,GACrDH,EAAO,qBAAqBK,CAAM,EAAE,EAAIF,EAAI,gBAAkB,IAG1DF,EAAAE,EAAI,OAAJ,MAAAF,EAAW,KACND,EAAA,QAAQK,CAAM,EAAE,EAAIF,EAAI,KAAK,CAAC,EAAE,IAAM,GACtCH,EAAA,SAASK,CAAM,EAAE,EAAIF,EAAI,KAAK,CAAC,EAAE,KAAO,KAI7CD,EAAAC,EAAI,OAAJ,MAAAD,EAAW,KACNF,EAAA,QAAQK,CAAM,IAAI,EAAIF,EAAI,KAAK,CAAC,EAAE,IAAM,GACxCH,EAAA,SAASK,CAAM,IAAI,EAAIF,EAAI,KAAK,CAAC,EAAE,KAAO,GACnD,CACD,EAEMH,CACT,CCnCO,SAASM,GAAuBC,EAA0B,CAC/D,KAAM,CAAE,KAAAC,EAAM,WAAAC,EAAY,SAAAC,EAAU,WAAAC,EAAY,KAAAC,CAAS,EAAAL,EAGnDM,EAAgBL,EAAK,SAAS,GAAG,EAAIA,EAAO,IAAI,KAAKA,CAAI,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EAGrFM,EAAiBL,EAAW,QAAQ,gBAAiB,EAAE,EACvDM,EAAeL,EAAS,QAAQ,gBAAiB,EAAE,EACnDM,EAAiBL,EAAW,QAAQ,gBAAiB,EAAE,EAGvDM,EAAW,GAAGJ,CAAa,IAAIC,CAAc,IAAIC,CAAY,IAAIC,CAAc,IAAIJ,CAAI,OAG7F,OAAQA,EAAM,CACZ,IAAK,MACH,MAAO,GAAGK,CAAQ,OACpB,IAAK,QACH,MAAO,GAAGA,CAAQ,QACpB,IAAK,MACH,MAAO,GAAGA,CAAQ,OACpB,QACS,OAAAA,CACX,CACF,CCnCA,MAAMC,GAAgB,CAACC,EAAQC,IAAiBA,EAAa,KAAMnC,GAAMkC,aAAkBlC,CAAC,EAE5F,IAAIoC,GACAC,GAEJ,SAASC,IAAuB,CAC5B,OAAQF,KACHA,GAAoB,CACjB,YACA,eACA,SACA,UACA,cACZ,EACA,CAEA,SAASG,IAA0B,CAC/B,OAAQF,KACHA,GAAuB,CACpB,UAAU,UAAU,QACpB,UAAU,UAAU,SACpB,UAAU,UAAU,kBAChC,EACA,CACA,MAAMG,GAAmB,IAAI,QACvBC,GAAqB,IAAI,QACzBC,GAA2B,IAAI,QAC/BC,GAAiB,IAAI,QACrBC,GAAwB,IAAI,QAClC,SAASC,GAAiBC,EAAS,CAC/B,MAAMC,EAAU,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC7C,MAAMC,EAAW,IAAM,CACnBJ,EAAQ,oBAAoB,UAAWK,CAAO,EAC9CL,EAAQ,oBAAoB,QAASM,CAAK,CACtD,EACcD,EAAU,IAAM,CAClBH,EAAQK,EAAKP,EAAQ,MAAM,CAAC,EAC5BI,GACZ,EACcE,EAAQ,IAAM,CAChBH,EAAOH,EAAQ,KAAK,EACpBI,GACZ,EACQJ,EAAQ,iBAAiB,UAAWK,CAAO,EAC3CL,EAAQ,iBAAiB,QAASM,CAAK,CAC/C,CAAK,EACD,OAAAL,EACK,KAAMO,GAAU,CAGbA,aAAiB,WACjBd,GAAiB,IAAIc,EAAOR,CAAO,CAG/C,CAAK,EACI,MAAM,IAAM,CAAA,CAAG,EAGpBF,GAAsB,IAAIG,EAASD,CAAO,EACnCC,CACX,CACA,SAASQ,GAA+BC,EAAI,CAExC,GAAIf,GAAmB,IAAIe,CAAE,EACzB,OACJ,MAAMC,EAAO,IAAI,QAAQ,CAACT,EAASC,IAAW,CAC1C,MAAMC,EAAW,IAAM,CACnBM,EAAG,oBAAoB,WAAYE,CAAQ,EAC3CF,EAAG,oBAAoB,QAASJ,CAAK,EACrCI,EAAG,oBAAoB,QAASJ,CAAK,CACjD,EACcM,EAAW,IAAM,CACnBV,IACAE,GACZ,EACcE,EAAQ,IAAM,CAChBH,EAAOO,EAAG,OAAS,IAAI,aAAa,aAAc,YAAY,CAAC,EAC/DN,GACZ,EACQM,EAAG,iBAAiB,WAAYE,CAAQ,EACxCF,EAAG,iBAAiB,QAASJ,CAAK,EAClCI,EAAG,iBAAiB,QAASJ,CAAK,CAC1C,CAAK,EAEDX,GAAmB,IAAIe,EAAIC,CAAI,CACnC,CACA,IAAIE,GAAgB,CAChB,IAAIC,EAAQC,EAAMC,EAAU,CACxB,GAAIF,aAAkB,eAAgB,CAElC,GAAIC,IAAS,OACT,OAAOpB,GAAmB,IAAImB,CAAM,EAExC,GAAIC,IAAS,mBACT,OAAOD,EAAO,kBAAoBlB,GAAyB,IAAIkB,CAAM,EAGzE,GAAIC,IAAS,QACT,OAAOC,EAAS,iBAAiB,CAAC,EAC5B,OACAA,EAAS,YAAYA,EAAS,iBAAiB,CAAC,CAAC,CAE9D,CAED,OAAOT,EAAKO,EAAOC,CAAI,CAAC,CAC3B,EACD,IAAID,EAAQC,EAAMP,EAAO,CACrB,OAAAM,EAAOC,CAAI,EAAIP,EACR,EACV,EACD,IAAIM,EAAQC,EAAM,CACd,OAAID,aAAkB,iBACjBC,IAAS,QAAUA,IAAS,SACtB,GAEJA,KAAQD,CAClB,CACL,EACA,SAASG,GAAaC,EAAU,CAC5BL,GAAgBK,EAASL,EAAa,CAC1C,CACA,SAASM,GAAaC,EAAM,CAIxB,OAAIA,IAAS,YAAY,UAAU,aAC/B,EAAE,qBAAsB,eAAe,WAChC,SAAUC,KAAeC,EAAM,CAClC,MAAMZ,EAAKU,EAAK,KAAKG,GAAO,IAAI,EAAGF,EAAY,GAAGC,CAAI,EACtD,OAAA1B,GAAyB,IAAIc,EAAIW,EAAW,KAAOA,EAAW,KAAM,EAAG,CAACA,CAAU,CAAC,EAC5Ed,EAAKG,CAAE,CAC1B,EAOQjB,GAAyB,EAAC,SAAS2B,CAAI,EAChC,YAAaE,EAAM,CAGtB,OAAAF,EAAK,MAAMG,GAAO,IAAI,EAAGD,CAAI,EACtBf,EAAKb,GAAiB,IAAI,IAAI,CAAC,CAClD,EAEW,YAAa4B,EAAM,CAGtB,OAAOf,EAAKa,EAAK,MAAMG,GAAO,IAAI,EAAGD,CAAI,CAAC,CAClD,CACA,CACA,SAASE,GAAuBhB,EAAO,CACnC,OAAI,OAAOA,GAAU,WACVW,GAAaX,CAAK,GAGzBA,aAAiB,gBACjBC,GAA+BD,CAAK,EACpCrB,GAAcqB,EAAOhB,IAAsB,EACpC,IAAI,MAAMgB,EAAOK,EAAa,EAElCL,EACX,CACA,SAASD,EAAKC,EAAO,CAGjB,GAAIA,aAAiB,WACjB,OAAOT,GAAiBS,CAAK,EAGjC,GAAIX,GAAe,IAAIW,CAAK,EACxB,OAAOX,GAAe,IAAIW,CAAK,EACnC,MAAMiB,EAAWD,GAAuBhB,CAAK,EAG7C,OAAIiB,IAAajB,IACbX,GAAe,IAAIW,EAAOiB,CAAQ,EAClC3B,GAAsB,IAAI2B,EAAUjB,CAAK,GAEtCiB,CACX,CACA,MAAMF,GAAUf,GAAUV,GAAsB,IAAIU,CAAK,EC5KzD,SAASkB,GAAOC,EAAMC,EAAS,CAAE,QAAAC,EAAS,QAAAC,EAAS,SAAAC,EAAU,WAAAC,CAAY,EAAG,GAAI,CAC5E,MAAMhC,EAAU,UAAU,KAAK2B,EAAMC,CAAO,EACtCK,EAAc1B,EAAKP,CAAO,EAChC,OAAI8B,GACA9B,EAAQ,iBAAiB,gBAAkBkC,GAAU,CACjDJ,EAAQvB,EAAKP,EAAQ,MAAM,EAAGkC,EAAM,WAAYA,EAAM,WAAY3B,EAAKP,EAAQ,WAAW,EAAGkC,CAAK,CAC9G,CAAS,EAEDL,GACA7B,EAAQ,iBAAiB,UAAYkC,GAAUL,EAE/CK,EAAM,WAAYA,EAAM,WAAYA,CAAK,CAAC,EAE9CD,EACK,KAAME,GAAO,CACVH,GACAG,EAAG,iBAAiB,QAAS,IAAMH,EAAY,CAAA,EAC/CD,GACAI,EAAG,iBAAiB,gBAAkBD,GAAUH,EAASG,EAAM,WAAYA,EAAM,WAAYA,CAAK,CAAC,CAE/G,CAAK,EACI,MAAM,IAAM,CAAA,CAAG,EACbD,CACX,CAgBA,MAAMG,GAAc,CAAC,MAAO,SAAU,SAAU,aAAc,OAAO,EAC/DC,GAAe,CAAC,MAAO,MAAO,SAAU,OAAO,EAC/CC,GAAgB,IAAI,IAC1B,SAASC,GAAUzB,EAAQC,EAAM,CAC7B,GAAI,EAAED,aAAkB,aACpB,EAAEC,KAAQD,IACV,OAAOC,GAAS,UAChB,OAEJ,GAAIuB,GAAc,IAAIvB,CAAI,EACtB,OAAOuB,GAAc,IAAIvB,CAAI,EACjC,MAAMyB,EAAiBzB,EAAK,QAAQ,aAAc,EAAE,EAC9C0B,EAAW1B,IAASyB,EACpBE,EAAUL,GAAa,SAASG,CAAc,EACpD,GAEA,EAAEA,KAAmBC,EAAW,SAAW,gBAAgB,YACvD,EAAEC,GAAWN,GAAY,SAASI,CAAc,GAChD,OAEJ,MAAMG,EAAS,eAAgBC,KAActB,EAAM,CAE/C,MAAMZ,EAAK,KAAK,YAAYkC,EAAWF,EAAU,YAAc,UAAU,EACzE,IAAI5B,EAASJ,EAAG,MAChB,OAAI+B,IACA3B,EAASA,EAAO,MAAMQ,EAAK,MAAO,CAAA,IAM9B,MAAM,QAAQ,IAAI,CACtBR,EAAO0B,CAAc,EAAE,GAAGlB,CAAI,EAC9BoB,GAAWhC,EAAG,IAC1B,CAAS,GAAG,CAAC,CACb,EACI,OAAA4B,GAAc,IAAIvB,EAAM4B,CAAM,EACvBA,CACX,CACA1B,GAAc4B,IAAc,CACxB,GAAGA,EACH,IAAK,CAAC/B,EAAQC,EAAMC,IAAauB,GAAUzB,EAAQC,CAAI,GAAK8B,EAAS,IAAI/B,EAAQC,EAAMC,CAAQ,EAC/F,IAAK,CAACF,EAAQC,IAAS,CAAC,CAACwB,GAAUzB,EAAQC,CAAI,GAAK8B,EAAS,IAAI/B,EAAQC,CAAI,CACjF,EAAE,EC1FF,MAAM+B,GAAU,kBACVC,GAAa,OACbC,GAAa,EAGnB,eAAeC,IAAS,CACtB,eAAQ,IAAI,2BAA2B,EAChCvB,GAAOoB,GAASE,GAAY,CACjC,QAAQb,EAAI,CACV,QAAQ,IAAI,uBAAuB,EAC9BA,EAAG,iBAAiB,SAASY,EAAU,IAC1C,QAAQ,IAAI,0BAA0B,EACtCZ,EAAG,kBAAkBY,GAAY,CAAE,QAAS,IAAM,CAAA,EAEtD,CAAA,CACD,CACH,CAGsB,eAAAG,GAASC,EAAeC,EAM3C,CACO,QAAA,IAAI,8BAA+BA,CAAQ,EAC7C,MAAAjB,EAAK,MAAMc,KACXI,EAAK,GAAGD,EAAS,IAAI,IAAIA,EAAS,UAAU,IAAIA,EAAS,QAAQ,IAAIA,EAAS,UAAU,GAE1F,GAAA,CACI,aAAAjB,EAAG,IAAIY,GAAY,CACvB,GAAAM,EACA,IAAKF,EACL,SAAAC,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CAAA,CACnC,EACO,QAAA,IAAI,mCAAoCC,CAAE,EAC3CA,QACA/C,EAAO,CACN,cAAA,MAAM,qBAAsBA,CAAK,EACnCA,CACR,CACF,CAGA,eAAsBgD,GAAOD,EAAY,CAC/B,QAAA,IAAI,iCAAkCA,CAAE,EAEhD,MAAME,EAAM,MADD,MAAMN,MACI,IAAIF,GAAYM,CAAE,EACvC,eAAQ,IAAI,iBAAkBE,EAAM,QAAU,WAAW,EAClDA,CACT,CC/BsB,eAAAC,GACpB1F,EACAC,EACA0F,EAAgC,CAAE,oBAAqB,EAAA,EACvDC,EAAS,2BACT,aACI,GAAA,CAEI,MAAAC,EAAW,KAIXC,EAAmB,GAHFF,EAAO,WAAW,MAAM,EAAIA,EAAS,GAAGC,CAAQ,GAAGD,EAAO,WAAW,GAAG,EAAIA,EAAO,MAAM,CAAC,EAAIA,CAAM,EAGjF,MAAM,KAAK,IAAK,CAAA,GAEpDG,EAAW,MAAM,MAAMD,EAAkB,CAC7C,MAAO,WACP,QAAS,CACP,gBAAiB,sCACjB,OAAU,UACZ,CAAA,CACD,EAEG,GAAA,CAACC,EAAS,GACZ,cAAQ,MAAM,oBAAqBA,EAAS,OAAQA,EAAS,UAAU,EACjE,IAAI,MAAM,wBAAwBA,EAAS,UAAU,EAAE,EAGzD,MAAAC,EAAW,MAAMD,EAAS,cAC1BE,EAAS,MAAMC,GAAY,KAAKF,CAAQ,EAExCG,EAAOF,EAAO,UACd9F,EAASJ,GAAeC,EAAMC,CAAQ,EAGpC,QAAA,IAAI,6BAA8BkG,EAAK,UAAU,EAAE,IAASvH,GAAAA,EAAE,QAAQ,CAAC,CAAC,EAGzE,OAAA,QAAQuB,CAAM,EAAE,QAAQ,CAAC,CAACiG,EAAO1D,CAAK,IAAM,CAC7C,GAAA,CACF,QAAQ,IAAI,6BAA6B0D,CAAK,gBAAgB1D,CAAK,EAAE,EACrEyD,EAAK,aAAaC,CAAK,EAAE,QAAQ1D,CAAK,QAC/BjD,EAAG,CAEV,QAAQ,KAAK,SAAS2G,CAAK,qBAAsB3G,CAAC,CACpD,CAAA,CACD,EAGK,MAAA4G,EAAiB,MAAMJ,EAAO,OAC9BK,EAAO,IAAI,KAAK,CAACD,CAAc,EAAG,CAAE,KAAM,iBAAA,CAAmB,EAG7DjF,EAAWX,GAAuB,CACtC,OAAMJ,GAAAD,EAAAJ,EAAK,CAAC,IAAN,YAAAI,EAAS,KAAK,KAAd,YAAAC,EAAkB,OAAY,IAAA,KAAA,EAAO,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EACrE,WAAYJ,EAAS,YAAc,GACnC,SAAUA,EAAS,UAAY,GAC/B,WAAYA,EAAS,YAAc,GACnC,KAAM,KAAA,CACP,EAGKsG,EAAQ,MAAMnB,GAASkB,EAAM,CACjC,SAAAlF,EACA,OAAMoF,GAAAC,EAAAzG,EAAK,CAAC,IAAN,YAAAyG,EAAS,KAAK,KAAd,YAAAD,EAAkB,OAAY,IAAA,KAAA,EAAO,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EACrE,WAAYvG,EAAS,YAAc,GACnC,SAAUA,EAAS,UAAY,GAC/B,WAAYA,EAAS,YAAc,EAAA,CACpC,EAGD,GAAI0F,EAAQ,oBAAqB,CAEzB,MAAAe,EAAM,IAAI,gBAAgBJ,CAAI,EAC9BjH,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAOqH,EACTrH,EAAE,SAAW+B,EACb/B,EAAE,MAAM,EACR,IAAI,gBAAgBqH,CAAG,CACzB,CAGA,OAAIf,EAAQ,WACH,CAAE,KAAAW,EAAM,SAAAlF,EAAU,MAAAmF,GAGpB,CAAE,SAAAnF,EAAU,MAAAmF,SACZ/D,EAAO,CAEd,MADQ,QAAA,MAAM,qBAAsBA,CAAK,EACrCA,aAAiB,MACbA,EAEF,IAAI,MAAM,8EAA8E,CAChG,CACF,CCxEA,MAAMmE,GAAwC,CAE5C,SAAU,KACV,WAAY,KACZ,SAAU,KACV,WAAY,KACZ,MAAO,KACP,MAAO,KAGP,aAAc,EACd,QAAS,IACT,SAAU,IACV,OAAQ,IACR,QAAS,IACT,OAAQ,IACR,QAAS,IAGT,cAAe,GACf,cAAe,GACjB,EAEA,eAAsBC,GACpB5G,EACAC,EACA4G,EACAC,EAAc,qBACdC,EAA2BJ,GACH,CACpB,GAAA,CAEF,GAAI,CAAC,MAAM,QAAQ3G,CAAI,EACf,MAAA,IAAI,MAAM,uBAAuB,EAInC,MAAA+F,EAAW,MAAM,MAAMe,CAAW,EACpC,GAAA,CAACf,EAAS,GACZ,MAAM,IAAI,MAAM,6BAA6BA,EAAS,UAAU,EAAE,EAG9D,MAAAiB,EAAe,MAAMjB,EAAS,cAC9BkB,EAAWC,GAAUF,EAAc,CAAE,KAAM,QAAS,EACpDG,EAAYF,EAAS,OAAOA,EAAS,WAAW,CAAC,CAAC,EAGpDF,EAAQ,WACAI,EAAAJ,EAAQ,QAAQ,EAAI,CAAE,EAAG,IAAK,GAAG9G,GAAA,YAAAA,EAAU,WAAY,KAE/D8G,EAAQ,aACAI,EAAAJ,EAAQ,UAAU,EAAI,CAAE,EAAG,IAAK,GAAG9G,GAAA,YAAAA,EAAU,aAAc,KAEnE8G,EAAQ,WACAI,EAAAJ,EAAQ,QAAQ,EAAI,CAAE,EAAG,IAAK,GAAG9G,GAAA,YAAAA,EAAU,WAAY,KAE/D8G,EAAQ,aACAI,EAAAJ,EAAQ,UAAU,EAAI,CAAE,EAAG,IAAK,GAAG9G,GAAA,YAAAA,EAAU,aAAc,KAInE8G,EAAQ,QACAI,EAAAJ,EAAQ,KAAK,EAAI,CAAE,EAAG,IAAK,GAAGF,GAAA,YAAAA,EAAO,KAAM,EAAG,GAEtDE,EAAQ,QACAI,EAAAJ,EAAQ,KAAK,EAAI,CAAE,EAAG,IAAK,GAAGF,GAAA,YAAAA,EAAO,KAAM,EAAG,GAIpD,MAAAO,EAAWL,EAAQ,cAAgB,EACpC/G,EAAA,QAAQ,CAACM,EAAKC,IAAQ,SAEzB,GAAI,CAACD,GAAQ,CAACA,EAAI,MAAQ,CAACA,EAAI,eAAiB,OAEhD,MAAME,EAAS4G,EAAW7G,EACtBC,EAAS4G,EAAW,KAGpBL,EAAQ,UACVI,EAAU,GAAGJ,EAAQ,OAAO,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,MAAQ,EAAG,GAErEyG,EAAQ,WACVI,EAAU,GAAGJ,EAAQ,QAAQ,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,gBAAkB,EAAG,IAIhFF,EAAAE,EAAI,OAAJ,MAAAF,EAAW,KACT2G,EAAQ,SACVI,EAAU,GAAGJ,EAAQ,MAAM,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,KAAK,CAAC,EAAE,IAAM,KAEvEyG,EAAQ,UACVI,EAAU,GAAGJ,EAAQ,OAAO,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,KAAK,CAAC,EAAE,KAAO,OAK3ED,EAAAC,EAAI,OAAJ,MAAAD,EAAW,KACT0G,EAAQ,SACVI,EAAU,GAAGJ,EAAQ,MAAM,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,KAAK,CAAC,EAAE,IAAM,KAEvEyG,EAAQ,UACVI,EAAU,GAAGJ,EAAQ,OAAO,GAAGvG,CAAM,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGF,EAAI,KAAK,CAAC,EAAE,KAAO,MAE/E,CACD,EAGK,MAAA+G,EAAaC,GAAoBtH,CAAI,EACvC,OAAA+G,EAAQ,eAAiBA,EAAQ,gBACnCI,EAAU,GAAGJ,EAAQ,aAAa,GAAGA,EAAQ,aAAa,EAAE,EAAI,CAAE,EAAG,IAAK,EAAGM,CAAW,GAGnFJ,QACAzE,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CACR,CACF,CA+CA,SAAS8E,GAAoBtH,EAA4B,CACnD,GAAA,CAAC,MAAM,QAAQA,CAAI,EAAU,MAAA,GAEjC,IAAIuH,EAAQ,EACZ,UAAWjH,KAAON,EACZ,GAAA,GAACM,GAAO,CAACA,EAAI,MAAQ,CAAC,MAAM,QAAQA,EAAI,IAAI,GAErC,UAAAkH,KAAOlH,EAAI,KAAM,CAC1B,GAAI,CAACkH,EAAK,SACJ,MAAAC,EAAKC,GAAkBF,EAAI,EAAE,EAC7BG,EAAMD,GAAkBF,EAAI,GAAG,EACjCC,IAAO,MAAQE,IAAQ,MAAQA,GAAOF,IACxCF,GAASI,EAAMF,EAEnB,CAEF,OAAO,OAAOF,EAAM,QAAQ,CAAC,CAAC,CAChC,CAEA,SAASG,GAAkBE,EAA6B,CAClD,GAAA,CAAC,UAAU,KAAKA,CAAI,EAAU,OAAA,KAClC,MAAMlI,EAAI,SAASkI,EAAK,MAAM,EAAG,CAAC,EAAG,EAAE,EACjC5I,EAAI,SAAS4I,EAAK,MAAM,EAAG,CAAC,EAAG,EAAE,EACnC,OAAAlI,EAAI,IAAMV,EAAI,GAAW,KACtBU,EAAIV,EAAI,EACjB,CCvNA,MAAM6I,EAAe,CAArB,aAAA,CACE,KAAQ,GAAmC,KAC3C,KAAiB,QAAU,eAC3B,KAAiB,WAAa,aAAA,CAE9B,MAAM,QAAS,CACT,OAAC,KAAK,KACR,KAAK,GAAK,MAAMjE,GAAgB,KAAK,QAAS,EAAG,CAC/C,QAAQS,EAAI,CACLA,EAAG,iBAAiB,SAAS,aAAa,GAC7CA,EAAG,kBAAkB,aAAa,CAEtC,CAAA,CACD,GAEI,KAAK,EACd,CAEQ,gBAAgByD,EAAeC,EAAuB,CACrD,MAAA,GAAGD,CAAK,OAAOC,CAAK,EAC7B,CAEA,MAAM,WAAWD,EAAeC,EAAe/H,EAAaC,EAAe,CACnE,MAAAoE,EAAK,MAAM,KAAK,SAChB2D,EAAY,KAAK,gBAAgBF,EAAOC,CAAK,EAC3C,QAAA,IAAI,qBAAsBC,CAAS,EACrC,MAAA3D,EAAG,IAAI,KAAK,WAAY,CAC5B,UAAA2D,EACA,KAAAhI,EACA,SAAAC,GACC+H,CAAS,CACd,CAEA,MAAM,UAAUA,EAAmB,CAC3B,MAAA3D,EAAK,MAAM,KAAK,SACd,eAAA,IAAI,iCAAkC2D,CAAS,EAChD3D,EAAG,IAAI,KAAK,WAAY2D,CAAS,CAC1C,CAEA,MAAM,kBAAsC,CAE1C,MAAMC,EAAS,MADJ,MAAM,KAAK,UACE,WAAW,KAAK,UAAU,EAC1C,eAAA,IAAI,mBAAoBA,CAAM,EAC/BA,CACT,CAEA,MAAM,aAAaD,EAAmB,CAEpC,MADW,MAAM,KAAK,UACb,OAAO,KAAK,WAAYA,CAAS,CAC5C,CACF,CAEa,MAAAE,GAAiB,IAAIL,GC5D3B,SAASM,GAAaC,EAA0B,CACrD,KAAM,CAAE,QAAAC,EAAS,KAAAtH,EAAM,QAAAuH,EAAS,SAAAC,EAAW,GAAS,EAAAH,EAEpD,OAAAI,GAAM,UAAU,IAAM,CACd,MAAAC,EAAQ,WAAW,IAAM,CACrBH,KACPC,CAAQ,EAEJ,MAAA,IAAM,aAAaE,CAAK,CAAA,EAC9B,CAACF,EAAUD,CAAO,CAAC,EAGnBI,EAAA,KAAA,MAAA,CAAI,UAAW,6BAA6B3H,CAAI,GAC/C,SAAA,CAAC4H,EAAA,IAAA,MAAA,CAAI,UAAU,uBACZ,SACHN,EAAA,QACC,SAAO,CAAA,UAAU,qBAAqB,QAASC,EAAS,SAAC,IAAA,CAC5D,CAAA,CAAA,CAEJ,CCzBO,MAAMM,EAAqB,CAChC,SAAU,CACR,SAAU,KACV,WAAY,KACZ,SAAU,KACV,WAAY,IACd,EACA,MAAO,CACL,MAAO,KACP,MAAO,IACT,EACA,YAAa,CACX,SAAU,EACV,QAAS,CACP,KAAM,IACN,eAAgB,IAChB,IAAK,IACL,KAAM,IACN,IAAK,IACL,KAAM,GACR,CACF,CACF,EAEA,SAASC,EAAmB1B,EAA2B2B,EAA0B,OAE/E,GAAI3B,EAAU2B,CAAW,GAAK3B,EAAU2B,CAAW,EAAE,IAAM,OAClD,OAAA3B,EAAU2B,CAAW,EAAE,EAGhC,MAAMC,EAAS5B,EAAU,SAAS,GAAK,CAAA,EACjC6B,EAAYC,GAAW,YACvBjG,EAASgG,EAAUF,CAAW,EAEpC,UAAWI,KAASH,EAElB,GACE/F,EAAO,GAAKkG,EAAM,EAAE,GAAKlG,EAAO,GAAKkG,EAAM,EAAE,GAC7ClG,EAAO,GAAKkG,EAAM,EAAE,GAAKlG,EAAO,GAAKkG,EAAM,EAAE,EAC7C,CAEA,MAAMC,EAAUF,GAAW,YAAY,CAAE,EAAGC,EAAM,EAAE,EAAG,EAAGA,EAAM,EAAE,CAAG,CAAA,EAC9D,QAAA9I,EAAA+G,EAAUgC,CAAO,IAAjB,YAAA/I,EAAoB,IAAK,EAClC,CAEK,MAAA,EACT,CAEO,SAASgJ,GAAejC,EAA8E,CAE3G,MAAMlH,EAAqB,CACzB,SAAU4I,EAAmB1B,EAAWyB,EAAmB,SAAS,QAAQ,GAAK,GACjF,WAAYC,EAAmB1B,EAAWyB,EAAmB,SAAS,UAAU,GAAK,GACrF,SAAUC,EAAmB1B,EAAWyB,EAAmB,SAAS,QAAQ,GAAK,GACjF,WAAYC,EAAmB1B,EAAWyB,EAAmB,SAAS,UAAU,GAAK,EAAA,EAIjFd,EAAQe,EAAmB1B,EAAWyB,EAAmB,MAAM,KAAK,GAAK,GACzEb,EAAQc,EAAmB1B,EAAWyB,EAAmB,MAAM,KAAK,GAAK,GAEzES,EAA4B,CAAA,EAC9B,IAAA/I,EAAMsI,EAAmB,YAAY,SAGzC,KAAOtI,GAAO,IAAI,CAEV,MAAAgJ,EAAWnC,EAAU,GAAGyB,EAAmB,YAAY,QAAQ,IAAI,GAAGtI,CAAG,EAAE,EAGjF,GAAI,EAACgJ,GAAA,MAAAA,EAAU,GAAG,MAGlB,MAAMC,EAAyB,CAC7B,KAAMV,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,IAAI,GAAGtI,CAAG,EAAE,EAC1F,eAAgBuI,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,cAAc,GAAGtI,CAAG,EAAE,EAC9G,KAAM,CACJ,CACE,KAAMwH,EACN,GAAIe,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,GAAG,GAAGtI,CAAG,EAAE,EACvF,IAAKuI,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,IAAI,GAAGtI,CAAG,EAAE,CAC3F,EACA,CACE,KAAMyH,EACN,GAAIc,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,GAAG,GAAGtI,CAAG,EAAE,EACvF,IAAKuI,EAAmB1B,EAAW,GAAGyB,EAAmB,YAAY,QAAQ,IAAI,GAAGtI,CAAG,EAAE,CAC3F,CACF,CAAA,EAGF+I,EAAY,KAAKE,CAAU,EAC3BjJ,GACF,CAEO,MAAA,CAAE,SAAAL,EAAU,YAAAoJ,EACrB,CCtFO,SAAS/B,GAAoBtH,EAA4B,CAE9D,IAAIqH,EAAa,EAGjB,OAAArH,EAAK,QAAkBwJ,GAAA,CAEhBA,EAAO,MAGLA,EAAA,KAAK,QAAehC,GAAA,CAEzB,GAAI,CAACA,EAAI,IAAM,CAACA,EAAI,IAAK,OAGnB,MAAAiC,EAASC,GAAiBlC,EAAI,EAAE,EAChCmC,EAAUD,GAAiBlC,EAAI,GAAG,EAGpC,GAAAiC,IAAW,MAAQE,IAAY,KAAM,OAGrC,IAAAC,GAASD,EAAUF,GAAU,GAG7BG,EAAQ,IACDA,GAAA,IAIGvC,GAAAuC,CAAA,CACf,CAAA,CACF,EAEM,OAAOvC,EAAW,QAAQ,CAAC,CAAC,CACrC,CAGA,SAASqC,GAAiB9B,EAA6B,CAEjD,GAAA,UAAU,KAAKA,CAAI,EAAG,CAExB,MAAMgC,EAAQ,SAAShC,EAAK,UAAU,EAAG,CAAC,CAAC,EACrCiC,EAAU,SAASjC,EAAK,UAAU,EAAG,CAAC,CAAC,EAG7C,GAAIgC,GAAS,GAAKA,GAAS,IAAMC,GAAW,GAAKA,GAAW,GAC1D,OAAOD,EAAQ,GAAKC,CAExB,CAGM,MAAAC,EAAQlC,EAAK,MAAM,qBAAqB,EAC9C,GAAIkC,EAAO,CACT,MAAMF,EAAQ,SAASE,EAAM,CAAC,CAAC,EACzBD,EAAU,SAASC,EAAM,CAAC,CAAC,EAGjC,GAAIF,GAAS,GAAKA,GAAS,IAAMC,GAAW,GAAKA,GAAW,GAC1D,OAAOD,EAAQ,GAAKC,CAExB,CAEO,OAAA,IACT,CClEO,MAAME,GAA4C,CAAC,CAAE,WAAAC,EAAY,aAAAC,EAAc,QAAA3B,KAAc,CAElG,KAAM,CAAC4B,EAAaC,CAAc,EAAIC,EAAAA,SAAS,IAAI,IAAM,EAEnD,CAACC,EAAcC,CAAe,EAAIF,WAAsB,IAAI,EAE5D,CAACG,EAAcC,CAAe,EAAIJ,EAAA,SAAiB,CAAE,CAAA,EAG3DK,EAAAA,UAAU,IAAM,CAER,MAAAC,EAAOR,EAAY,cACnBS,EAAQT,EAAY,WACpBU,EAAW,IAAI,KAAKF,EAAMC,EAAO,CAAC,EAClCE,EAAU,IAAI,KAAKH,EAAMC,EAAQ,EAAG,CAAC,EAMrCG,EAHiBF,EAAS,SAO1BG,EADY,IACqBF,EAAQ,QAAY,EAAAC,GAErDjE,EAAe,CAAA,EAGrB,QAASmE,EAAIF,EAAoB,EAAGE,GAAK,EAAGA,IAC1CnE,EAAK,KAAK,IAAI,KAAK6D,EAAMC,EAAO,CAACK,CAAC,CAAC,EAIrC,QAASA,EAAI,EAAGA,GAAKH,EAAQ,QAAA,EAAWG,IACtCnE,EAAK,KAAK,IAAI,KAAK6D,EAAMC,EAAOK,CAAC,CAAC,EAIpC,QAASA,EAAI,EAAGA,GAAKD,EAAmBC,IACtCnE,EAAK,KAAK,IAAI,KAAK6D,EAAMC,EAAQ,EAAGK,CAAC,CAAC,EAGxCR,EAAgB3D,CAAI,CAAA,EACnB,CAACqD,CAAW,CAAC,EAEhB,MAAMe,EAAkB,IAAM,CACbd,EAAA,IAAI,KAAKD,EAAY,YAAY,EAAGA,EAAY,WAAa,EAAG,CAAC,CAAC,CAAA,EAG7EgB,EAAkB,IAAM,CACbf,EAAA,IAAI,KAAKD,EAAY,YAAY,EAAGA,EAAY,WAAa,EAAG,CAAC,CAAC,CAAA,EAG7EiB,EAAmBxK,GAAe,CACtC2J,EAAgB3J,CAAI,EAEpB,MAAMyK,EAAUzK,EAAK,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EACzC0K,EAAoBrB,EAAW,KAAcsB,GAAA,CACjD,KAAM,CAACC,EAAOC,CAAG,EAAIF,EAAM,MAAM,MAAM,EAChC,OAAAF,GAAWG,GAASH,GAAWI,CAAA,CACvC,EAEGH,IACFpB,EAAaoB,CAAiB,EACtB/C,IACV,EAGImD,EAAe9K,GAAe,CAClC,MAAMyK,EAAUzK,EAAK,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EACxC,OAAAqJ,EAAW,KAAcsB,GAAA,CAC9B,KAAM,CAACC,EAAOC,CAAG,EAAIF,EAAM,MAAM,MAAM,EAChC,OAAAF,GAAWG,GAASH,GAAWI,CAAA,CACvC,CAAA,EAGGE,EAAkB/K,GACfA,EAAK,SAAA,IAAeuJ,EAAY,SAAS,EAGlD,aACG,MAAI,CAAA,UAAU,sBACb,SAACxB,EAAA,KAAA,MAAA,CAAI,UAAU,wBACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,uBACb,SAAA,CAACC,EAAA,IAAA,SAAA,CAAO,QAASsC,EAAiB,SAAI,IAAA,EACtCtC,EAAAA,IAAC,KAAI,CAAA,SAAAuB,EAAY,eAAe,UAAW,CAAE,MAAO,OAAQ,KAAM,SAAU,CAAC,CAAE,CAAA,EAC9EvB,EAAA,IAAA,SAAA,CAAO,QAASuC,EAAiB,SAAI,IAAA,CAAA,EACxC,EACAxC,EAAAA,KAAC,MAAI,CAAA,UAAU,qBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,yBACZ,SAAA,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAAE,OAChDA,EAAA,IAAA,MAAA,CAAc,UAAU,wBAAyB,SAAAnB,CAAA,EAAxCA,CAA4C,CACvD,CACH,CAAA,EACAmB,EAAAA,IAAC,OAAI,UAAU,qBACZ,WAAa,IAAI,CAAChI,EAAMgL,IACvBhD,EAAA,IAAC,MAAA,CAEC,UAAW,qBACR+C,EAAe/K,CAAI,EAAoB,GAAhB,aAC1B,IAAI8K,EAAY9K,CAAI,EAAI,YAAc,EAAE,KACtC0J,GAAA,YAAAA,EAAc,kBAAmB1J,EAAK,aAAiB,EAAA,WAAa,EACtE,GACA,QAAS,IAAMwK,EAAgBxK,CAAI,EAElC,WAAK,QAAQ,CAAA,EARTgL,CAUR,CAAA,EACH,CAAA,EACF,QACC,SAAO,CAAA,UAAU,sBAAsB,QAASrD,EAAS,SAAK,QAAA,CAAA,CACjE,CAAA,CACF,CAAA,CAEJ,ECvHI,OAAO,OAAW,KAAe,CAACsD,GAA6B,YAExDA,GAAoB,UAAYA,GAA6B,WAAa,IAAA,IAAA,qCAAA,KAAA,QAAA,EAA+D,MAIpJ,MAAMC,GAAa,CACjB,iBAAkB,GAClB,cAAe,GACf,gBAAiB,GACjB,eAAgB,GAChB,oBAAqB,OACrB,QAAS,OACT,gBAAiB,EACnB,EAUMC,GAAsD,CAAC,CAC3D,MAAAvF,EACA,OAAAwF,EACA,UAAAC,EACA,MAAAC,EACA,SAAAC,EAAW,EACb,IAAM,CACE,MAAAC,EAAYC,SAA0B,IAAI,EAC1CC,EAAgBD,SAA0B,IAAI,EAC9CE,EAAeF,SAAuB,IAAI,EAC1CG,EAAYH,SAAyC,IAAI,EACzD,CAACI,EAAWC,CAAY,EAAIrC,WAAS,EAAI,EACzC,CAAC5H,EAAOkK,CAAQ,EAAItC,WAAwB,IAAI,EAChD,CAACuC,EAAWC,CAAY,EAAIxC,WAAS,EAAK,EAC1C,CAACyC,EAAWC,CAAY,EAAI1C,WAAS,SAAS,EAC9C,CAAC2C,EAAWC,CAAY,EAAI5C,WAAS,CAAC,EACtC6C,EAAab,SAAwC,IAAI,EACtCA,EAAAA,OAA8B,IAAI,EAErD,MAAAc,EAAYC,cAAY,MAAOlH,GAAsC,CACzE,GAAI,GAACkG,EAAU,SAAW,CAACE,EAAc,SAErC,GAAA,CACFI,EAAa,EAAI,EACjB,MAAMW,EAAO,MAAMnH,EAAO,QAAQ,CAAC,EAE7BoH,EAASlB,EAAU,QACnBmB,EAAUD,EAAO,WAAW,KAAM,CACtC,MAAO,GACP,mBAAoB,EAAA,CACrB,EAEKE,EAAalB,EAAc,QAC3BmB,EAAcD,EAAW,WAAW,KAAM,CAC9C,MAAO,GACP,mBAAoB,EAAA,CACrB,EAEG,GAAA,CAACD,GAAW,CAACE,EAAa,OAG9B,MAAMC,EAAWL,EAAK,YAAY,CAAE,MAAO,EAAK,EAG1CM,EAAYpB,EAAa,QAC/B,GAAIoB,EAAW,CACb,MAAMC,EAAiBD,EAAU,YAC3BE,GAAkBF,EAAU,aAC5BG,EAAQ,KAAK,IACjBF,EAAiBF,EAAS,MAC1BG,GAAkBH,EAAS,MAAA,EAE7BA,EAAS,MAAQI,CACnB,CAGAR,EAAO,OAASI,EAAS,OACzBJ,EAAO,MAAQI,EAAS,MACxBF,EAAW,OAASE,EAAS,OAC7BF,EAAW,MAAQE,EAAS,MAG5BH,EAAQ,UAAY,QACpBA,EAAQ,SAAS,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,EAClDG,EAAY,UAAU,EAAG,EAAGD,EAAW,MAAOA,EAAW,MAAM,EAG/D,MAAMH,EAAK,OAAO,CAChB,cAAeE,EACf,SAAAG,CACD,CAAA,EAAE,QAEHhB,EAAa,EAAK,QACXqB,EAAK,CACJ,QAAA,MAAM,wBAAyBA,CAAG,EAC1CpB,EAAS,0CAA0C,EACnDD,EAAa,EAAK,CACpB,CACF,EAAG,CAAE,CAAA,EAECsB,EAAgBtO,GAA2C,CAC/D,GAAI,CAAC4M,EAAc,QAAS,OACtB,MAAA2B,EAAO3B,EAAc,QAAQ,sBAAsB,EACnD4B,EAAS5B,EAAc,QAAQ,MAAQ2B,EAAK,MAC5CE,EAAS7B,EAAc,QAAQ,OAAS2B,EAAK,OACnDf,EAAW,QAAU,CACnB,GAAIxN,EAAE,QAAUuO,EAAK,MAAQC,EAC7B,GAAIxO,EAAE,QAAUuO,EAAK,KAAOE,CAAA,EAE9BtB,EAAa,EAAI,CAAA,EAGbuB,EAAQ1O,GAA2C,CACvD,GAAI,CAACkN,GAAa,CAACN,EAAc,SAAW,CAACY,EAAW,QAAS,OAEjE,MAAMI,EAAShB,EAAc,QACvB+B,EAAMf,EAAO,WAAW,IAAI,EAClC,GAAI,CAACe,EAAK,OAEJ,MAAAJ,EAAOX,EAAO,wBACdY,EAASZ,EAAO,MAAQW,EAAK,MAC7BE,EAASb,EAAO,OAASW,EAAK,OAC9BK,EAAa,CACjB,GAAI5O,EAAE,QAAUuO,EAAK,MAAQC,EAC7B,GAAIxO,EAAE,QAAUuO,EAAK,KAAOE,CAAA,EAG9BE,EAAI,UAAU,EACdA,EAAI,YAAcvB,EAClBuB,EAAI,UAAYrB,EAChBqB,EAAI,QAAU,QACdA,EAAI,OAAOnB,EAAW,QAAQ,EAAGA,EAAW,QAAQ,CAAC,EACrDmB,EAAI,OAAOC,EAAW,EAAGA,EAAW,CAAC,EACrCD,EAAI,OAAO,EAEXnB,EAAW,QAAUoB,CAAA,EAGjBC,EAAc,IAAM,CACxB1B,EAAa,EAAK,EAClBK,EAAW,QAAU,IAAA,EAGjBsB,GAAe,IAAM,CACzB,MAAMlB,EAAShB,EAAc,QAC7B,GAAI,CAACgB,EAAQ,OACP,MAAAe,EAAMf,EAAO,WAAW,IAAI,EAC7Be,GACLA,EAAI,UAAU,EAAG,EAAGf,EAAO,MAAOA,EAAO,MAAM,CAAA,EAG3CmB,EAAa,SAAY,CACzB,GAAA,GAACrC,EAAU,SAAW,CAACE,EAAc,SAAW,CAACN,GAAU,CAACQ,EAAU,SAEtE,GAAA,CAEF,MAAMgB,EAAalB,EAAc,QAC3BoC,EAAkB,MAAM,IAAI,QAAerM,GAAY,CAChDmL,EAAA,OAAQjH,IAAS,CAC1BlE,EAAQkE,EAAK,GACZ,WAAW,CAAA,CACf,EAGKN,EAAW,MAAMuG,EAAU,QAAQ,QAAQ,EAG3CtG,EAAS,MAAMC,GAAY,KAAKF,CAAQ,EAExC0I,EADQzI,EAAO,WACG,CAAC,EAGnB0I,EAAkB,IAAI,WAAW,MAAMF,EAAgB,YAAa,CAAA,EAGpEG,EAAqB,MAAM3I,EAAO,SAAS0I,CAAe,EAG1D,CAAE,MAAAE,EAAO,OAAAC,EAAO,EAAIJ,EAAU,QAAQ,EAG5CA,EAAU,UAAUE,EAAoB,CACtC,EAAG,EACH,EAAG,EACH,MAAAC,EACA,OAAAC,GACA,QAAS,CAAA,CACV,EAGK,MAAAC,EAAmB,MAAM9I,EAAO,OAChC+I,GAAkB,IAAI,KAAK,CAACD,CAAgB,EAAG,CAAE,KAAM,iBAAA,CAAmB,EAEhFhD,EAAOiD,EAAe,QACflB,EAAK,CACJ,QAAA,MAAM,oBAAqBA,CAAG,EACtCpB,EAAS,sCAAsC,CACjD,CAAA,EAGFjC,OAAAA,EAAAA,UAAU,IAAM,CACd,IAAIwE,EAAU,GACVC,EAA+C,KA4C3C,OA1CQ,SAAY,CAC1B,GAAK3I,EAED,GAAA,CACFkG,EAAa,EAAI,EACjBC,EAAS,IAAI,EAEP,MAAAyC,EAAY,MAAM3J,GAAOe,CAAK,EAChC,GAAA,CAAC4I,GAAa,CAACF,EAAS,OAE5B,MAAMG,EAAc,MAAMD,EAAU,IAAI,YAAY,EACpD,GAAI,CAACF,EAAS,OAOR,MAAAxJ,EAAM,MALQ4J,GAAqB,CACvC,KAAMD,EACN,GAAGvD,EAAA,CACJ,EAE6B,QAE9B,GAAI,CAACoD,EAAS,CACZxJ,EAAI,QAAQ,EACZ,MACF,CAGI8G,EAAU,SACZA,EAAU,QAAQ,UAGP2C,EAAAzJ,EACb8G,EAAU,QAAU9G,EACpB,MAAMyH,EAAUzH,CAAG,QACZqI,EAAK,CACJ,QAAA,MAAM,qBAAsBA,CAAG,EACnCmB,IACFvC,EAAS,uCAAuC,EAChDD,EAAa,EAAK,EAEtB,CAAA,KAKK,IAAM,CACDwC,EAAA,GACNC,GACFA,EAAW,QAAQ,EAEjB3C,EAAU,UACZA,EAAU,QAAQ,UAClBA,EAAU,QAAU,KACtB,CACF,EACC,CAAChG,EAAO2G,CAAS,CAAC,SAGlB,MAAI,CAAA,UAAW,uBAAuBlB,GAAa,EAAE,GAAI,MAAAC,EACvD,SAAA,CAAA,CAACC,GACAxD,EAAAA,KAAC,MAAI,CAAA,UAAU,UACb,SAAA,CAAAC,EAAA,IAAC,QAAA,CACC,KAAK,QACL,MAAOkE,EACP,SAAWpN,GAAMqN,EAAarN,EAAE,OAAO,KAAK,EAC5C,MAAM,eAAA,CACR,EACAkJ,EAAA,IAAC,QAAA,CACC,KAAK,QACL,IAAI,IACJ,IAAI,KACJ,MAAOoE,EACP,SAAWtN,GAAMuN,EAAa,OAAOvN,EAAE,OAAO,KAAK,CAAC,EACpD,MAAM,eAAA,CACR,QACC,SAAO,CAAA,QAAS8O,GAAc,UAAU,YAAY,SAAa,gBAAA,QACjE,SAAO,CAAA,QAASC,EAAY,UAAU,WAAW,SAAmB,sBAAA,CAAA,EACvE,EAGD9F,EAAA,KAAA,MAAA,CAAI,UAAU,mBAAmB,IAAK4D,EACpC,SAAA,CAAA9J,GAAUmG,EAAA,IAAA,MAAA,CAAI,UAAU,gBAAiB,SAAMnG,EAAA,EAC/CgK,GAAa7D,EAAA,IAAC,MAAI,CAAA,UAAU,UAAU,SAAc,iBAAA,EACpDA,EAAA,IAAA,SAAA,CAAO,IAAKwD,EAAW,UAAU,aAAa,EAC9C,CAACD,GACAvD,EAAA,IAAC,SAAA,CACC,IAAK0D,EACL,UAAU,cACV,YAAa0B,EACb,YAAaI,EACb,UAAWG,EACX,aAAcA,CAAA,CAChB,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,ECzRMgB,GAAc,iBAEpB,SAASC,GAASvP,EAAoB,CACpC,aAAa,QAAQsP,GAAa,KAAK,UAAUtP,CAAI,CAAC,CACxD,CAEA,SAASwP,IAAyB,CAC1B,MAAAC,EAAM,aAAa,QAAQH,EAAW,EAC5C,GAAIG,EACE,GAAA,CACK,OAAA,KAAK,MAAMA,CAAG,CAAA,MACf,CACC,OAAA3P,CACT,CAEK,OAAAA,CACT,CAuGA,SAAwB4P,IAAY,CAClC,KAAM,CAAC1P,EAAM2P,CAAO,EAAIvF,WAAuB,IAAM,CACnD,MAAMwF,EAAaJ,KACnB,OAAO,MAAM,QAAQI,CAAU,EAAIA,EAAa9P,CAAA,CACjD,EAEK,CAAC+P,EAAUC,CAAW,EAAI1F,WAAS,IAAM,SAC7C,QAAO/J,GAAAD,EAAAJ,EAAK,CAAC,IAAN,YAAAI,EAAS,OAAT,YAAAC,EAAe,SAAU,CAAA,CACjC,EAEK,CAACwG,EAAMkJ,CAAO,EAAI3F,WAAmB,IAAM,SACzC,MAAA4F,GAAc3P,GAAAD,EAAAJ,EAAK,CAAC,IAAN,YAAAI,EAAS,OAAT,YAAAC,EAAe,IAAI,GAAK,EAAE,MACvC,OAAA,MAAM,QAAQ2P,CAAW,GAAKA,EAAY,SAAW,EAAIA,EAAc,CAAC,GAAI,EAAE,CAAA,CACtF,EACK,CAACC,EAAiBC,CAAkB,EAAI9F,WAAS,EAAK,EACtD,CAACnK,EAAUkQ,CAAW,EAAI/F,WAAmB,CACjD,SAAU,GACV,WAAY,GACZ,SAAU,GACV,WAAY,EAAA,CACb,EACK,CAACgG,EAAaC,CAAc,EAAIjG,WAA6B,IAAI,EACjE,CAACkG,EAASC,CAAU,EAAInG,WAAiB,CAAC,EAC1C,CAACJ,EAAYwG,CAAa,EAAIpG,EAAA,SAAmB,CAAE,CAAA,EACnD,CAACC,EAAcC,CAAe,EAAIF,WAAiB,EAAE,EACrD,CAACqG,EAAmBC,CAAoB,EAAItG,WAAS,EAAK,EAC1D,CAACuG,EAAcC,CAAe,EAAIxG,WAA4B,CAClE,QAAS,GACT,KAAM,OACN,KAAM,EAAA,CACP,EAGK,CAACyG,EAAgBC,CAAiB,EAAI1G,WAAS,CACnD,KAAApK,EACA,SAAAC,EACA,KAAA4G,CAAA,CACD,EAEK,CAACkK,GAAkBC,CAAmB,EAAI5G,EAAAA,SAAiB,EAAE,EAG7D/C,EAAaC,GAAoBtH,CAAI,EAGrC,CAACiR,EAAqBC,CAAsB,EAAI9G,WAAS,CAAC,EAG1D,CAAC+G,EAAmBC,CAAoB,EAAIhH,WAAmB,CACnE,SAAU,GACV,WAAY,GACZ,SAAU,GACV,WAAY,EAAA,CACb,EAEK,CAACiH,EAAcC,CAAe,EAAIlH,WAAS,EAAK,EAChD,CAACmH,EAAsBC,CAAuB,EAAIpH,WAAwB,IAAI,EAE9E,CAACqH,GAAeC,CAAgB,EAAItH,WAAS,EAAK,EAClD,CAAC7D,GAAOoL,CAAQ,EAAIvH,WAAwB,IAAI,EAGhD,CAACwH,GAAiBC,EAAkB,EAAIzH,EAAA,SAAiC,CAAE,CAAA,EAG3E,CAAC0H,GAAeC,EAAgB,EAAI3H,WAAS,EAAK,EAGxDK,EAAAA,UAAU,IAAM,CACCuH,IACjB,EAAG,CAAE,CAAA,EAGLvH,EAAAA,UAAU,IAAM,CACIqG,EAAA,CAChB,KAAM,CAAC,GAAG9Q,CAAI,EACd,SAAU,CAAE,GAAGC,CAAS,EACxB,KAAM,CAAC,GAAG4G,CAAI,CAAA,CACf,CACH,EAAG,CAAE,CAAA,EAGL4D,EAAAA,UAAU,IAAM,CACdyG,EAAuB7J,CAAU,CACnC,EAAG,CAAE,CAAA,EAGLoD,EAAAA,UAAU,IAAM,CAEd,MAAMwH,EAAc,GAClBhS,EAAS,UACTA,EAAS,YACTA,EAAS,UACTA,EAAS,YAILiS,EAAW,GAAQrL,EAAK,CAAC,GAAKA,EAAK,CAAC,GAGpCsL,EAAe,KAAK,IAAI9K,EAAa4J,CAAmB,EAAI,IAG5DmB,EACJnS,EAAS,WAAakR,EAAkB,UACxClR,EAAS,aAAekR,EAAkB,YAC1ClR,EAAS,WAAakR,EAAkB,UACxClR,EAAS,aAAekR,EAAkB,WAU5CT,EANmB,IAChByB,GAAgBC,IACjBH,GACAC,EAG6B,CAAA,EAC9B,CAAC7K,EAAYpH,EAAU4G,EAAMoK,EAAqBE,CAAiB,CAAC,EAEvE,MAAMa,GAAiB,SAAY,CAC7B,GAAA,CACI,MAAAK,EAAa,MAAMnK,GAAe,mBACxCsI,EAAc6B,CAAU,QACjB7P,EAAO,CACN,QAAA,MAAM,6BAA8BA,CAAK,CACnD,CAAA,EAGI8P,EAAmB,CAACjK,EAAiBtH,IAAmD,CAC5F6P,EAAgB,CAAE,QAAAvI,EAAS,KAAAtH,EAAM,KAAM,EAAM,CAAA,CAAA,EAGzCwR,GAAmB,IAAM,CAC7B3B,MAAyB,CAAE,GAAG4B,EAAM,KAAM,EAAQ,EAAA,CAAA,EAG9ChE,GAAa,SAAY,CAC7B,GAAI,CAAC3H,EAAK,CAAC,GAAK,CAACA,EAAK,CAAC,EAAG,CACxByL,EAAiB,0CAA2C,SAAS,EACrE,MACF,CACI,GAAA,CACI,MAAAxK,EAAQjB,EAAK,CAAC,EACdkB,EAAQlB,EAAK,CAAC,EACpB,MAAMqB,GAAe,WAAWJ,EAAOC,EAAO/H,EAAMC,CAAQ,EAC5D,MAAM+R,GAAe,EAGrBd,EAAuB7J,CAAU,EACZ+J,EAAA,CAAE,GAAGnR,CAAA,CAAU,EAEpCyQ,EAAqB,EAAK,EAC1B4B,EAAiB,2BAA4B,SAAS,QAC/C9P,EAAO,CACN,QAAA,MAAM,qBAAsBA,CAAK,EACzC8P,EAAiB,yCAA0C,OAAO,CACpE,CAAA,EAGIG,GAAuB,IACtBpI,EACEL,EAAW,UAAkBrJ,GAAAA,IAAS0J,CAAY,EAD/B,GAItBqI,GAAsB,SAAY,CACtC,MAAMC,EAAeF,KACrB,GAAIE,EAAe,EAAG,CACd,MAAAC,EAAgB5I,EAAW2I,EAAe,CAAC,EAEjDjC,EAAqB,EAAK,EAC1B,MAAMmC,GAAiBD,CAAa,CACtC,CAAA,EAGIE,GAAkB,SAAY,CAClC,MAAMH,EAAeF,KACjB,GAAAE,EAAe3I,EAAW,OAAS,EAAG,CAClC,MAAA+I,EAAgB/I,EAAW2I,EAAe,CAAC,EAEjDjC,EAAqB,EAAK,EAC1B,MAAMmC,GAAiBE,CAAa,CACtC,CAAA,EAGIF,GAAmB,MAAO7K,GAAsB,CACpD,GAAIA,IAAc,MAAO,CACvB,GAAIyI,EAAmB,CACrB6B,EAAiB,qFAAsF,SAAS,EAChH,MACF,CACA3C,EAAQ7P,CAAW,EACPqQ,EAAA,CACV,SAAU,GACV,WAAY,GACZ,SAAU,GACV,WAAY,EAAA,CACb,EACOJ,EAAA,CAAC,GAAI,EAAE,CAAC,EAChBzF,EAAgB,EAAE,EAClB0G,EAAoB,EAAE,EACtBN,EAAqB,EAAK,EAC1BQ,EAAuB,CAAC,EACHE,EAAA,CACnB,SAAU,GACV,WAAY,GACZ,SAAU,GACV,WAAY,EAAA,CACb,EACDO,EAAS,IAAI,EACbW,EAAiB,oBAAqB,MAAM,EAC5C,MACF,CAEA,GAAI7B,EAAmB,CACrB6B,EAAiB,2FAA4F,SAAS,EACtH,MACF,CAEI,GAAA,CACF,MAAMU,EAAS,MAAM9K,GAAe,UAAUF,CAAS,EACvD,GAAIgL,EAAQ,CACVrD,EAAQqD,EAAO,IAAI,EACnB7C,EAAY6C,EAAO,QAAQ,EAC3B,KAAM,CAAClL,EAAOC,CAAK,EAAIiL,EAAO,UAAU,MAAM,MAAM,EAC5CjD,EAAA,CAACjI,EAAOC,CAAK,CAAC,EACtBuC,EAAgBtC,CAAS,EACLgJ,EAAAhH,EAAW,QAAQhC,CAAS,CAAC,EACjD0I,EAAqB,EAAK,EAGpB,MAAAuC,EAAmB3L,GAAoB0L,EAAO,IAAI,EACxD9B,EAAuB+B,CAAgB,EACvC7B,EAAqB,CAAE,GAAG4B,EAAO,QAAU,CAAA,EAGlCrB,EAAAC,GAAgB5J,CAAS,GAAK,IAAI,EAE3CsK,EAAiB,2BAA4B,SAAS,CACxD,QACO9P,EAAO,CACN,QAAA,MAAM,qCAAsCA,CAAK,EACzD8P,EAAiB,yCAA0C,OAAO,CACpE,CAAA,EAGF7H,EAAAA,UAAU,IAAM,CACd8E,GAASvP,CAAI,CAAA,EACZ,CAACA,CAAI,CAAC,EAET,MAAMkT,GAAsB,CAACC,EAAgB/M,EAAegN,IAAoB,CACxE,MAAAC,EAAM,KAAK,MACbA,EAAM/C,EAAU,KAClBD,EAAe,CAAE,IAAK8C,EAAQ,MAAA/M,EAAO,OAAAgN,CAAQ,CAAA,EAE/C7C,EAAW8C,CAAG,CAAA,EAGVC,GAAwB,CAACH,EAAgB/M,EAAegN,IAAoB,CAChF/C,EAAe,CAAE,IAAK8C,EAAQ,MAAA/M,EAAO,OAAAgN,CAAQ,CAAA,CAAA,EAGzCG,GAAwB7Q,GAA2B,CACvD,GAAI,CAACA,EAAc,MAAA,GAGnB,GAAIA,EAAM,OAAS,EAAU,MAAA,GAG7B,MAAM8Q,EAAS9Q,EAAM,MAAM,EAAE,EAAE,IAAI,MAAM,EASrC,MANA,EAAA8Q,EAAO,CAAC,EAAI,GAGZA,EAAO,CAAC,IAAM,GAAKA,EAAO,CAAC,EAAI,GAG/BA,EAAO,CAAC,EAAI,EAET,EAiCHC,GAAiB,CAAChU,EAAwC0T,EAAgB/M,EAAegN,IAAoB,SAC3G,KAAA,CAAE,MAAA1Q,CAAM,EAAIjD,EAAE,OAGf,IAAA2G,IAAU,MAAQA,IAAU,SAE3B,CAAC,QAAQ,KAAK1D,CAAK,GAGnB,CAAC6Q,GAAqB7Q,CAAK,GAAG,OAG9B,MAAAgR,EAAU,CAAC,GAAG1T,CAAI,EAgBxB,GAbK0T,EAAQP,CAAM,IACjBO,EAAQP,CAAM,EAAI,CAChB,KAAM,GACN,eAAgB,GAChB,KAAMtM,EAAK,IAAalG,IAAA,CAAE,KAAAA,EAAM,GAAI,GAAI,IAAK,EAAK,EAAA,CAAA,GAKjD+S,EAAQP,CAAM,EAAE,OACnBO,EAAQP,CAAM,EAAE,KAAOtM,EAAK,IAAIlG,IAAS,CAAE,KAAAA,EAAM,GAAI,GAAI,IAAK,EAAA,EAAK,GAGjEyS,IAAW,QAQb,GANKM,EAAQP,CAAM,EAAE,KAAKC,CAAM,IAC9BM,EAAQP,CAAM,EAAE,KAAKC,CAAM,EAAI,CAAE,KAAMvM,EAAKuM,CAAM,GAAK,GAAI,GAAI,GAAI,IAAK,EAAG,GAE7EM,EAAQP,CAAM,EAAE,KAAKC,CAAM,EAAEhN,CAAkB,EAAI1D,EAG/CyQ,IAAW,EAEb,QAASnI,EAAI,EAAGA,EAAI0I,EAAQ,OAAQ1I,KAC9B5K,EAAAsT,EAAQ1I,CAAC,IAAT,MAAA5K,EAAY,OACTsT,EAAQ1I,CAAC,EAAE,KAAKoI,CAAM,IACzBM,EAAQ1I,CAAC,EAAE,KAAKoI,CAAM,EAAI,CAAE,KAAMvM,EAAKuM,CAAM,GAAK,GAAI,GAAI,GAAI,IAAK,EAAG,GAExEM,EAAQ1I,CAAC,EAAE,KAAKoI,CAAM,EAAEhN,CAAkB,EAAI1D,WAKnDgR,EAAQP,CAAM,EAAU/M,CAAK,EAAI1D,EAG9B0D,IAAU,QAAU1D,EAAO,CAC7B,MAAMiR,EAAWD,EAAQ,UACvBlK,GAAA,UAAA,QAAApJ,EAAAoJ,GAAA,YAAAA,EAAQ,iBAAR,YAAApJ,EAAwB,cAAc,SAAS,YAC/CC,GAAAmJ,GAAA,YAAAA,EAAQ,iBAAR,YAAAnJ,GAAwB,cAAc,SAAS,SAAM,EAGvD,GAAIsT,IAAa,IAAMR,EAASQ,KAAYtT,EAAAqT,EAAQC,CAAQ,IAAhB,MAAAtT,EAAmB,MAAM,CAC7D,MAAAuT,EAAWF,EAAQC,CAAQ,EAAE,KAC3BD,EAAAP,CAAM,EAAE,KAAOS,EAAS,IAAYpM,IAAA,CAAE,GAAGA,CAAM,EAAA,CACzD,CACF,CAGFmI,EAAQ+D,CAAO,EACfhD,EAAqB,EAAI,CAAA,EAGrBmD,GAAiB,IAAM,CAC3B,WAAW,IAAM,CACfxD,EAAe,IAAI,GAClB,GAAG,CAAA,EAGFyD,GAAgBvT,GAAgB,CACpC,MAAMmT,EAAU1T,EAAK,OAAO,CAAC+T,EAAG/I,IAAMA,IAAMzK,CAAG,EAC/CoP,EAAQ+D,CAAO,CAAA,EAGXM,GAAyB,CAACvU,EAAwCc,IAAgB,CAChF,MAAA0T,EAAUxU,EAAE,OAAO,MACjBsQ,EAAAyC,GAAQA,EAAK,IAAI,CAAChT,EAAGwL,IAAOA,IAAMzK,EAAM0T,EAAUzU,CAAE,CAAC,EAC7DmQ,EAAQ3P,GAAQA,EAAK,IAAYM,IAAA,CAC/B,GAAGA,EACH,KAAMA,EAAI,KAAK,IAAI,CAACkH,EAAKwD,IAAMA,IAAMzK,EAAM,CAAE,GAAGiH,EAAK,KAAMyM,CAAA,EAAYzM,CAAG,GAC1E,CAAC,EACHkJ,EAAqB,EAAI,CAAA,EAGrBwD,GAAuB,IAAM,CACjCvE,EAAQ7P,CAAW,EACnByP,GAASzP,CAAW,EACpBoQ,EAAmB,EAAK,EACxBoC,EAAiB,qCAAsC,MAAM,CAAA,EAGzD6B,GAAoB,IAAM,CAC9B5E,GAASvP,CAAI,EACbkQ,EAAmB,EAAK,EACxBoC,EAAiB,kCAAmC,SAAS,CAAA,EAGzD8B,GAAoB,SAAY,CAChC,GAAA,CAEF,GAAI,CAACvN,EAAK,CAAC,GAAK,CAACA,EAAK,CAAC,EAAG,CACxByL,EAAiB,oDAAqD,SAAS,EAC/E,MACF,CAEI,GAAA,CAACrS,EAAS,YAAc,CAACA,EAAS,UAAY,CAACA,EAAS,WAAY,CACtEqS,EAAiB,wEAAyE,SAAS,EACnG,MACF,CAQA,GAAI,CALgBtS,EAAK,KACvBwJ,GAAAA,EAAO,MAAQA,EAAO,gBACtBA,EAAO,KAAK,KAAYhC,GAAAA,EAAI,IAAMA,EAAI,GAAG,CAAA,EAGzB,CAChB8K,EAAiB,+EAAiF,SAAS,EAC3G,MACF,CAEAA,EAAiB,sBAAuB,MAAM,EAE9C,MAAM+B,EAAK,MAAMzN,GAAkB5G,EAAMC,EAAU4G,EAAM,oBAAoB,EACxEyN,GAAUD,EAAI5T,GAAuB,CACxC,KAAMoG,EAAK,CAAC,EACZ,WAAY5G,EAAS,WACrB,SAAUA,EAAS,SACnB,WAAYA,EAAS,WACrB,KAAM,OACP,CAAA,CAAC,EACFqS,EAAiB,qCAAsC,SAAS,QACzD9P,EAAO,CACN,QAAA,MAAM,0BAA2BA,CAAK,EAC9C,IAAI+R,EAAe,kCAEf/R,aAAiB,QACfA,EAAM,QAAQ,SAAS,SAAS,GAAKA,EAAM,QAAQ,SAAS,OAAO,EACrD+R,GAAA,uDACP/R,EAAM,QAAQ,SAAS,UAAU,EAC1B+R,GAAA,0EAEAA,GAAA,mDAIpBjC,EAAiBiC,EAAc,OAAO,CACxC,CAAA,EAGIC,GAAkB,SAAY,CAC9B,GAAA,CAEF,MAAMC,EAAS,MAAM/O,GAAW1F,EAAMC,EAAU,CAC9C,oBAAqB,GACrB,WAAY,EAAA,CACb,EAGKyU,EAAmB,GAAG7N,EAAK,CAAC,CAAC,OAAOA,EAAK,CAAC,CAAC,GACjDgL,GAA4BW,IAAA,CAC1B,GAAGA,EACH,CAACkC,CAAgB,EAAGD,EAAO,KAC3B,EAAA,EACF9C,EAAS8C,EAAO,KAAK,EACrBnC,EAAiB,4DAA6D,SAAS,QAChF9P,EAAO,CACN,QAAA,MAAM,uBAAwBA,CAAK,EAC3C8P,EAAiB,0CAA2C,OAAO,CACrE,CAAA,EAGIqC,GAAqBlV,GAA2C,OACpE,MAAMmV,GAAOxU,EAAAX,EAAE,OAAO,QAAT,YAAAW,EAAiB,GAC9B,GAAI,CAACwU,EAAM,OAEL,MAAAC,EAAS,IAAI,WACZA,EAAA,OAAUC,GAAQ,OACnB,GAAA,CACI9U,MAAAA,GAAOI,EAAA0U,EAAI,SAAJ,YAAA1U,EAAY,OACnB6G,EAAWC,GAAUlH,EAAM,CAAE,KAAM,SAAU,EAC7C+U,EAAY9N,EAAS,WAAW,CAAC,EACjCE,EAAYF,EAAS,OAAO8N,CAAS,EAGrC,CAAE,SAAUC,EAAkB,YAAA3L,EAAY,EAAID,GAAejC,CAAS,EAOxE,GAJJgJ,EAAY6E,CAAgB,EAC5BrF,EAAQtG,EAAW,EAGfA,GAAY,OAAS,EAAG,CACpB,MAAA4L,GAAQ5L,GAAY,CAAC,EAAE,KAAK,IAAI7J,IAAKA,GAAE,IAAI,EACjDuQ,EAAQkF,EAAK,EACbnF,EAAYmF,GAAM,MAAM,CAC1B,CAEA/E,EAAmB,EAAI,EACvBoC,EAAiB,mCAAoC,SAAS,QACvD9P,EAAO,CACN,QAAA,MAAM,8BAA+BA,CAAK,EAClD8P,EAAiB,4DAA6D,OAAO,CACvF,CAAA,EAEFuC,EAAO,mBAAmBD,CAAI,CAAA,EAG1BM,GAAsB,SAAY,CACtC,GAAI,CAACrO,EAAK,CAAC,GAAK,CAACA,EAAK,CAAC,EAAG,CACxByL,EAAiB,qDAAsD,SAAS,EAChF,MACF,CAOA,GAAI,CAJgBtS,EAAK,KAAKwJ,GAC5BA,EAAO,MAAQA,EAAO,cAAA,EAGN,CAChB8I,EAAiB,6DAA8D,SAAS,EACxF,MACF,CAEI,GAAA,CACFA,EAAiB,kCAAmC,MAAM,EAG1D,MAAM6C,EAAY,IAAI,KAAKtO,EAAK,CAAC,CAAC,EAC5BuO,EAAU,IAAI,KAAKvO,EAAK,CAAC,CAAC,EAC1BwO,EAAW,KAAK,MAAMD,EAAQ,QAAQ,EAAID,EAAU,QAAA,IAAc,IAAO,GAAK,GAAK,GAAG,EAG5F,QAASnK,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAErB,MAAAsK,EAAe,IAAI,KAAKF,CAAO,EACrCE,EAAa,QAAQA,EAAa,UAAY,EAAKtK,GAAKqK,EAAW,EAAG,EAEhE,MAAAE,EAAa,IAAI,KAAKD,CAAY,EACxCC,EAAW,QAAQA,EAAW,QAAQ,EAAIF,CAAQ,EAElD,MAAMG,EAAkBF,EAAa,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EACzDG,EAAgBF,EAAW,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EAGrD7B,EAAU1T,EAAK,IAAewJ,IAAA,CAClC,KAAMA,EAAO,KACb,eAAgBA,EAAO,eACvB,KAAM,CACJ,CAAE,KAAMgM,EAAiB,GAAI,GAAI,IAAK,EAAG,EACzC,CAAE,KAAMC,EAAe,GAAI,GAAI,IAAK,EAAG,CACzC,CACA,EAAA,EAGF,MAAMvN,GAAe,WAAWsN,EAAiBC,EAAe/B,EAASzT,CAAQ,CACnF,CAGA,MAAM+R,GAAe,EACrBhB,EAAoByB,IAAsB,EAC1CH,EAAiB,wDAAyD,SAAS,QAC5E9P,EAAO,CACN,QAAA,MAAM,mCAAoCA,CAAK,EACvD8P,EAAiB,sDAAuD,OAAO,CACjF,CAAA,EAGIoD,GAAoB,SAAY,CACpC,GAAI,CAACrL,EAAc,CACjBiI,EAAiB,wCAAyC,SAAS,EACnE,MACF,CAEA,GAAI7B,EAAmB,CACrB6B,EAAiB,gEAAiE,SAAS,EAC3F,MACF,CAEI,GAAA,CACI,MAAApK,GAAe,aAAamC,CAAY,EAE9CwH,GAA2BW,GAAA,CACnB,MAAAmD,EAAqB,CAAE,GAAGnD,GAChC,cAAOmD,EAAmBtL,CAAY,EAC/BsL,CAAA,CACR,EACD,MAAM3D,GAAe,EACrB1H,EAAgB,EAAE,EAClB0G,EAAoB,EAAE,EACtBrB,EAAQ7P,CAAW,EACPqQ,EAAA,CACV,SAAU,GACV,WAAY,GACZ,SAAU,GACV,WAAY,EAAA,CACb,EACOJ,EAAA,CAAC,GAAI,EAAE,CAAC,EAChB4B,EAAS,IAAI,EACbW,EAAiB,6BAA8B,SAAS,QACjD9P,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,EAC5C8P,EAAiB,4CAA6C,OAAO,CACvE,CAAA,EAIA,OAAA5J,EAAA,KAAC,MAAI,CAAA,UAAU,gBACZ,SAAA,CAAAiI,EAAa,MACZhI,EAAA,IAACR,GAAA,CACC,QAASwI,EAAa,QACtB,KAAMA,EAAa,KACnB,QAAS4B,EAAA,CACX,EAED5J,EAAA,IAAA,KAAA,CAAG,UAAU,YAAY,SAAsB,yBAAA,EAGhDD,EAAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAA,EAAA,KAAC,SAAA,CACC,MAAO2B,EACP,SAAW5K,GAAMoT,GAAiBpT,EAAE,OAAO,KAAK,EAChD,UAAU,aAEV,SAAA,CAACkJ,EAAA,IAAA,SAAA,CAAO,MAAM,MAAM,SAAS,YAAA,EAC5BA,EAAA,IAAA,SAAA,CAAO,MAAM,GAAG,SAA4B,+BAAA,EAC5CqB,EAAW,IAAiBhC,GAAA,CAC3B,KAAM,CAACF,EAAOC,CAAK,EAAIC,EAAU,MAAM,MAAM,EAE3C,OAAAU,EAAA,KAAC,SAAuB,CAAA,MAAOV,EAC5B,SAAA,CAAAF,EAAM,OAAKC,CAAA,CAAA,EADDC,CAEb,CAAA,CAEH,CAAA,CAAA,CACH,EACAW,EAAA,IAAC,SAAA,CACC,UAAU,uBACV,QAAS,IAAM2I,EAAgB,EAAI,EACnC,MAAM,qBACP,SAAA,IAAA,CAED,CAAA,EACF,EACA5I,EAAAA,KAAC,MAAI,CAAA,UAAU,yBACb,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,UAAU,kBACV,QAAS+J,GACT,SAAU3B,IAAoB,EAC/B,SAAA,YAAA,CAED,EACApI,EAAA,IAAC,SAAA,CACC,UAAU,kBACV,QAASmK,GACT,SAAU/B,IAAoB/G,EAAW,OAAS,EACnD,SAAA,QAAA,CAED,CAAA,EACF,EACArB,EAAA,IAAC,SAAA,CACC,UAAU,mBACV,QAASuM,GACT,SAAU,CAACrO,EAAK,CAAC,EAClB,SAAA,sBAAA,CAED,EACA8B,EAAA,IAAC,SAAA,CACC,UAAU,mBACV,QAAS6F,GACT,SAAU,CAACiC,GAAqB,CAAC5J,EAAK,CAAC,GAAK,CAACA,EAAK,CAAC,EAElD,WAAoB,eAAiB,OAAA,CACxC,CAAA,EACF,EAEA6B,EAAAA,KAAC,MAAI,CAAA,UAAU,qBACb,SAAA,CAAAC,EAAA,IAAC,QAAA,CACC,UAAU,YACV,YAAY,YACZ,MAAO1I,EAAS,SAChB,SAAeR,GAAA0Q,EAAY,CAAE,GAAGlQ,EAAU,SAAUR,EAAE,OAAO,MAAO,CAAA,CACtE,EACAkJ,EAAA,IAAC,QAAA,CACC,UAAU,YACV,YAAY,cACZ,MAAO1I,EAAS,WAChB,SAAeR,GAAA0Q,EAAY,CAAE,GAAGlQ,EAAU,WAAYR,EAAE,OAAO,MAAO,CAAA,CACxE,EACAkJ,EAAA,IAAC,QAAA,CACC,UAAU,YACV,YAAY,YACZ,MAAO1I,EAAS,SAChB,SAAeR,GAAA0Q,EAAY,CAAE,GAAGlQ,EAAU,SAAUR,EAAE,OAAO,MAAO,CAAA,CACtE,EACAkJ,EAAA,IAAC,QAAA,CACC,UAAU,YACV,YAAY,cACZ,MAAO1I,EAAS,WAChB,SAAeR,GAAA0Q,EAAY,CAAE,GAAGlQ,EAAU,WAAYR,EAAE,OAAO,MAAO,CAAA,CACxE,CAAA,EACF,EACAiJ,EAAAA,KAAC,MAAI,CAAA,UAAU,cACb,SAAA,CAAAC,MAAC,SAAM,KAAK,OAAO,OAAO,QAAQ,SAAUgM,GAAmB,QAC9D,SAAO,CAAA,UAAU,UAAU,QAASP,GAAmB,SAAY,eAAA,QACnE,SAAO,CAAA,UAAU,UAAU,QAASI,GAAiB,SAAW,cAAA,EAChEvE,GACCtH,EAAAA,IAAC,SAAO,CAAA,UAAU,UAAU,QAASwL,GAAmB,MAAO,CAAE,WAAY,SAAU,EAAG,SAAe,iBAAA,CAAA,EAE3GxL,EAAAA,IAAC,SAAO,CAAA,UAAU,UAAU,QAASuL,GAAsB,MAAO,CAAE,WAAY,MAAO,EAAG,SAAgB,kBAAA,CAAA,EAC1GvL,EAAA,IAAC,SAAA,CACC,UAAU,UACV,QAAS+M,GACT,SAAU,CAACrL,EACX,MAAO,CAAE,WAAY,SAAU,EAChC,SAAA,cAAA,CAED,CAAA,EACF,EACC1B,EAAA,IAAA,MAAA,CAAI,MAAO,CAAE,UAAW,OAAQ,SAAU,MAAA,EACzC,SAAAD,EAAAA,KAAC,QAAM,CAAA,UAAU,YACf,SAAA,CAAAA,OAAC,QACC,CAAA,SAAA,CAAAA,OAAC,KACC,CAAA,SAAA,CAAAC,MAAC,KAAG,CAAA,UAAU,cAAc,QAAS,EAAG,SAAI,OAAA,QAC3C,KAAG,CAAA,UAAU,eAAe,QAAS,EAAG,SAAK,QAAA,EAC7C9B,EAAK,IAAI,CAAClG,EAAMqK,IACdtC,EAAAA,KAAA,KAAA,CAAG,UAAU,cAAc,QAAS,EAAW,MAAO,CAAE,UAAW,QAAY,EAAA,SAAA,CAAA,aACzE,KAAG,EAAA,EACRC,EAAA,IAAC,QAAA,CACC,UAAU,qBACV,KAAK,OACL,MAAOhI,EACP,SAAUlB,GAAKuU,GAAuBvU,EAAGuL,CAAC,EAC1C,MAAO,CAAE,WAAY,OAAQ,SAAU,GAAI,UAAW,SAAU,WAAY,cAAe,OAAQ,OAAQ,aAAc,qBAAsB,CAAA,CACjJ,CAAA,CAAA,EAR2CA,CAS7C,CACD,EACArC,EAAA,IAAA,KAAA,CAAG,UAAU,SAAS,QAAS,EAAG,CAAA,EACrC,EACAA,EAAAA,IAAC,KACE,CAAA,SAAA9B,EAAK,IAAI,CAACkN,EAAG/I,IACZtC,EAAAA,KAACF,GAAM,SAAN,CACC,SAAA,CAACG,EAAA,IAAA,KAAA,CAAG,UAAU,SAAS,SAAE,KAAA,EACxBA,EAAA,IAAA,KAAA,CAAG,UAAU,SAAS,SAAG,MAAA,CAAA,GAFPqC,CAGrB,CACD,EACH,CAAA,EACF,EACCrC,EAAAA,IAAA,QAAA,CACE,SAAM,MAAA,KAAK,CAAE,OAAQ,EAAI,CAAA,EAAE,IAAI,CAACoL,EAAGxT,IAAQ,CACpC,MAAAD,EAAMN,EAAKO,CAAG,GAAK,CACvB,KAAM,GACN,eAAgB,GAChB,KAAMsG,EAAK,IAAalG,IAAA,CAAE,KAAAA,EAAM,GAAI,GAAI,IAAK,EAAK,EAAA,CAAA,EAIlD,OAAA+H,EAAA,KAAC,KAAa,CAAA,UAAU,SACtB,SAAA,CAACC,EAAAA,IAAA,KAAA,CAAG,UAAU,SACX,UAAAyH,GAAA,YAAAA,EAAa,OAAQ7P,IAAO6P,GAAA,YAAAA,EAAa,SAAU,OAClDzH,EAAA,IAAC,QAAA,CACC,UAAU,YACV,MAAOrI,EAAI,MAAQ,GACnB,SAAUb,GAAKgU,GAAehU,EAAGc,EAAK,MAAM,EAC5C,OAAQsT,GACR,UAAS,EAAA,CAAA,EAGXlL,EAAA,IAAC,MAAA,CACC,UAAU,mBACV,cAAe,IAAM2K,GAAsB/S,EAAK,MAAM,EACtD,aAAc,IAAM2S,GAAoB3S,EAAK,MAAM,EAElD,WAAI,MAAQ,EAAA,CAAA,EAGnB,EACAoI,EAAAA,IAAC,MAAG,UAAU,SACX,2BAAa,OAAQpI,IAAO6P,GAAA,YAAAA,EAAa,SAAU,iBAClDzH,EAAA,IAAC,QAAA,CACC,UAAU,YACV,MAAOrI,EAAI,eACX,SAAUb,GAAKgU,GAAehU,EAAGc,EAAK,gBAAgB,EACtD,OAAQsT,GACR,UAAS,EAAA,CAAA,EAGXlL,EAAA,IAAC,MAAA,CACC,UAAU,mBACV,cAAe,IAAM2K,GAAsB/S,EAAK,gBAAgB,EAChE,aAAc,IAAM2S,GAAoB3S,EAAK,gBAAgB,EAE5D,SAAID,EAAA,cAAA,CAAA,EAGX,EACCA,EAAI,KAAK,IAAI,CAACkH,EAAK4L,IAClB1K,EAAAA,KAACF,GAAM,SAAN,CACC,SAAA,CAACG,EAAA,IAAA,KAAA,CAAG,UAAU,SACX,UAAayH,GAAA,YAAAA,EAAA,OAAQ7P,IAAO6P,GAAA,YAAAA,EAAa,SAAU,OAAQA,GAAA,YAAAA,EAAa,UAAWgD,EAClFzK,EAAA,IAAC,QAAA,CACC,UAAU,mBACV,MAAOnB,EAAI,GACX,SAAe/H,GAAAgU,GAAehU,EAAGc,EAAK,KAAM6S,CAAM,EAClD,OAAQS,GACR,UAAS,GACT,YAAY,OACZ,UAAW,EACX,UAAU,UACV,QAAQ,QAAA,CAAA,EAGVlL,EAAA,IAAC,MAAA,CACC,UAAU,mBACV,cAAe,IAAM2K,GAAsB/S,EAAK,KAAM6S,CAAM,EAC5D,aAAc,IAAMF,GAAoB3S,EAAK,KAAM6S,CAAM,EAExD,SAAI5L,EAAA,EAAA,CAAA,EAGX,EACCmB,EAAA,IAAA,KAAA,CAAG,UAAU,SACX,UAAayH,GAAA,YAAAA,EAAA,OAAQ7P,IAAO6P,GAAA,YAAAA,EAAa,SAAU,QAASA,GAAA,YAAAA,EAAa,UAAWgD,EACnFzK,EAAA,IAAC,QAAA,CACC,UAAU,oBACV,MAAOnB,EAAI,IACX,SAAe/H,GAAAgU,GAAehU,EAAGc,EAAK,MAAO6S,CAAM,EACnD,OAAQS,GACR,UAAS,GACT,YAAY,OACZ,UAAW,EACX,UAAU,UACV,QAAQ,QAAA,CAAA,EAGVlL,EAAA,IAAC,MAAA,CACC,UAAU,mBACV,cAAe,IAAM2K,GAAsB/S,EAAK,MAAO6S,CAAM,EAC7D,aAAc,IAAMF,GAAoB3S,EAAK,MAAO6S,CAAM,EAEzD,SAAI5L,EAAA,GAAA,CAAA,EAGX,CAAA,CAAA,EA9CmB4L,CA+CrB,CACD,QACA,KAAG,CAAA,UAAU,SACX,SAAApT,EAAKO,CAAG,GACPoI,EAAA,IAAC,SAAA,CACC,UAAU,UACV,MAAO,CAAE,WAAY,UAAW,QAAS,SAAU,EACnD,QAAS,IAAMmL,GAAavT,CAAG,EAChC,SAAA,GAAA,CAAA,EAIL,CAAA,CAAA,EAnGOA,CAoGT,CAEH,CAAA,EACH,CAAA,CAAA,CACF,CACF,CAAA,EAGAmI,EAAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAACC,EAAA,IAAA,MAAA,CAAI,UAAU,kBAAkB,SAAmB,sBAAA,QACnD,MAAI,CAAA,UAAU,kBAAmB,SAAWtB,EAAA,QAAQ,CAAC,EAAE,CAAA,EAC1D,EAGCd,IACCmC,EAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAa,eAAA,CAAA,EACjBD,EAAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,UAAU,uBACV,QAAS,IAAM,CACboJ,GAAiB,EAAK,EACtBL,EAAiB,EAAI,CACvB,EACD,SAAA,UAAA,CAED,EACA/I,EAAA,IAAC,SAAA,CACC,UAAU,uBACV,QAAS,IAAM,CACboJ,GAAiB,EAAI,EACrBL,EAAiB,EAAI,CACvB,EACD,SAAA,UAAA,CAED,CAAA,EACF,CAAA,EACF,EAGDL,GACC1I,EAAA,IAACoB,GAAA,CACC,WAAAC,EACA,aAAc6I,GACd,QAAS,IAAMvB,EAAgB,EAAK,CAAA,CACtC,EAGDC,IAAyB,MACvB5I,MAAA,MAAA,CAAI,UAAU,qBACb,SAAAA,EAAA,IAAC,QAAA,CACC,KAAK,OACL,MAAO9B,EAAK0K,CAAoB,EAChC,SAAW9R,GAAM,CACT,MAAAwU,EAAUxU,EAAE,OAAO,MACjBsQ,EAAAyC,GAAQA,EAAK,IAAI,CAAC,EAAGxH,IAAOA,IAAMuG,EAAuB0C,EAAU,CAAE,CAAC,EAC9EtE,EAAQ3P,GAAQA,EAAK,IAAYM,IAAA,CAC/B,GAAGA,EACH,KAAMA,EAAI,KAAK,IAAI,CAACkH,EAAKwD,IAAMA,IAAMuG,EAAuB,CAAE,GAAG/J,EAAK,KAAMyM,CAAA,EAAYzM,CAAG,GAC3F,CAAC,EACHkJ,EAAqB,EAAI,EACzBc,EAAwB,IAAI,CAC9B,EACA,OAAQ,IAAMA,EAAwB,IAAI,EAC1C,UAAS,EAAA,CAAA,EAEb,EAGDC,IAAiBlL,IACfoC,EAAAA,IAAA,MAAA,CAAI,UAAU,QACb,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,UAAU,kBACV,QAAS,IAAM,CACb+I,EAAiB,EAAK,EACtBK,GAAiB,EAAK,CACxB,EACD,SAAA,GAAA,CAED,EACApJ,EAAA,IAACmD,GAAA,CACC,MAAAvF,GACA,SAAU,CAACuL,GACX,OAAQ,MAAOxL,GAAS,CAClB,GAAA,CAEI,MAAAoO,EAAmB,GAAG7N,EAAK,CAAC,CAAC,OAAOA,EAAK,CAAC,CAAC,GAC3C+O,EAAW,MAAMxQ,GAASkB,EAAM,CACpC,SAAU7F,GAAuB,CAC/B,KAAMoG,EAAK,CAAC,EACZ,WAAY5G,EAAS,WACrB,SAAUA,EAAS,SACnB,WAAYA,EAAS,WACrB,KAAM,KAAA,CACP,EACD,KAAM4G,EAAK,CAAC,EACZ,WAAY5G,EAAS,WACrB,SAAUA,EAAS,SACnB,WAAYA,EAAS,UAAA,CACtB,EAGD4R,GAA4BW,IAAA,CAC1B,GAAGA,EACH,CAACkC,CAAgB,EAAGkB,CACpB,EAAA,EACFjE,EAASiE,CAAQ,EAEjBlE,EAAiB,EAAK,EACtBK,GAAiB,EAAK,EACtBO,EAAiB,2BAA4B,SAAS,QAC/C9P,EAAO,CACN,QAAA,MAAM,2BAA4BA,CAAK,EAC/C8P,EAAiB,4BAA6B,OAAO,CACvD,CACF,CAAA,CACF,CAAA,CAAA,CACF,CACF,CAAA,CAEJ,CAAA,CAAA,CAEJ,CCxnCA,SAAwBuD,IAAM,CAC5B,aAAQnG,GAAU,CAAA,CAAA,CACpB,CCCI,kBAAmB,UACd,OAAA,iBAAiB,OAAQ,SAAY,CACtC,GAAA,CACF,MAAMoG,EAAe,MAAM,UAAU,cAAc,SAAS,SAAU,CACpE,MAAO,GAAA,CACR,EAGD,YAAY,IAAM,CAChBA,EAAa,OAAO,CAAA,EACnB,GAAK,GAAK,GAAI,EAGJA,EAAA,iBAAiB,cAAe,IAAM,CACjD,MAAMC,EAAYD,EAAa,WAC3BC,GACQA,EAAA,iBAAiB,cAAe,IAAM,CAC1CA,EAAU,QAAU,aAAe,UAAU,cAAc,YAEvC,OAAO,QAC3B,oEAAA,GAGA,OAAO,SAAS,QAEpB,CACD,CACH,CACD,EAEO,QAAA,IAAI,kBAAmBD,CAAY,QACpCtT,EAAO,CACN,QAAA,MAAM,2BAA4BA,CAAK,CACjD,CAAA,CACD,EAED,QAAQ,KAAK,mDAAmD,EAGlEwT,GAAS,WAAW,SAAS,eAAe,MAAM,CAAE,EAAE,aACnDxN,GAAM,WAAN,CACC,SAAAG,EAAAA,IAACkN,IAAI,CAAA,EACP,CACF","x_google_ignoreList":[0,1,2,6,7]}